import sys
import csv
import psycopg2
from PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget, QDialog, QLabel,
                             QLineEdit, QPushButton, QVBoxLayout, QHBoxLayout,
                             QMessageBox, QTabWidget, QTableWidget, QTableWidgetItem,
                             QComboBox, QHeaderView, QScrollArea, QFileDialog, QDateEdit, QCheckBox)
from PyQt5.QtCore import Qt, QDate, QTime, QSizeF
from PyQt5.QtGui import QPalette, QColor
import os
from datetime import datetime


# –°—Ç–∏–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
APP_STYLE = """
QMainWindow, QDialog, QWidget {
    background-color: #F3E9DC;
    color: #5E3023;
    font-family: Arial;
    font-size: 14px;
}

QPushButton {
    background-color: #895737;
    color: #FFFFFF;
    border: 1px solid #5E3023;
    border-radius: 4px;
    padding: 8px 16px;
    font-weight: bold;
    min-width: 80px;
}

QPushButton:hover {
    background-color: #C08552;
}

QPushButton:pressed {
    background-color: #5E3023;
}

QLineEdit, QComboBox, QDateEdit {
    background-color: #FFFFFF;
    border: 1px solid #C08552;
    padding: 6px;
    border-radius: 4px;
    min-height: 25px;
}

QLineEdit:focus, QComboBox:focus, QDateEdit:focus {
    border: 2px solid #895737;
}

QTabWidget::pane {
    border: 1px solid #C08552;
    background: #F3E9DC;
    margin-top: -1px;
}

QTabBar::tab {
    background: #E8D5C4;
    color: #5E3023;
    padding: 12px 25px;          /* –£–≤–µ–ª–∏—á–∏–ª–∏ –æ—Ç—Å—Ç—É–ø—ã */
    border: 1px solid #C08552;
    border-bottom: none;
    border-top-left-radius: 4px;
    border-top-right-radius: 4px;
}

QTabBar::tab:selected {
    background: #F3E9DC;
    color: #5E3023;
    font-weight: bold;
}

QTableWidget {
    background-color: #FFFFFF;
    border: 1px solid #C08552;
    gridline-color: #E8D5C4;
    selection-background-color: #895737;
    selection-color: white;
}

QHeaderView::section {
    background-color: #895737;
    color: white;
    padding: 6px;
    border: none;
    font-weight: bold;
}
"""


class Database:
    def __init__(self):
        self.conn = psycopg2.connect(
            dbname="School",
            user="postgres",
            password="katel",
            host="localhost"
        )
        self.cursor = self.conn.cursor()

    def execute(self, query, params=None, fetch=True):
        try:
            self.cursor.execute(query, params or ())
            if not fetch:
                self.conn.commit()
            return self.cursor.fetchall() if fetch else None
        except Exception as e:
            self.conn.rollback()
            raise e


class LoginWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setStyleSheet(APP_STYLE)
        self.setWindowTitle("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
        self.setFixedSize(400, 250)
        self.db = Database()

        central_widget = QWidget()
        self.setCentralWidget(central_widget)

        main_layout = QVBoxLayout(central_widget)
        main_layout.setContentsMargins(30, 20, 30, 20)
        main_layout.setSpacing(15)

        title = QLabel("–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É —à–∫–æ–ª—ã")
        title.setStyleSheet("font-size: 16px; font-weight: bold; color: #5E3023;")
        title.setAlignment(Qt.AlignCenter)
        main_layout.addWidget(title)

        form_layout = QVBoxLayout()
        form_layout.setSpacing(10)

        lbl_login = QLabel("–õ–æ–≥–∏–Ω:")
        lbl_login.setStyleSheet("font-weight: bold;")
        form_layout.addWidget(lbl_login)

        self.edit_login = QLineEdit()
        self.edit_login.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω")
        form_layout.addWidget(self.edit_login)

        lbl_pass = QLabel("–ü–∞—Ä–æ–ª—å:")
        lbl_pass.setStyleSheet("font-weight: bold;")
        form_layout.addWidget(lbl_pass)

        self.edit_pass = QLineEdit()
        self.edit_pass.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å")
        self.edit_pass.setEchoMode(QLineEdit.Password)
        form_layout.addWidget(self.edit_pass)

        main_layout.addLayout(form_layout)

        btn_layout = QHBoxLayout()
        btn_layout.setSpacing(10)

        self.btn_login = QPushButton("–í–æ–π—Ç–∏")
        self.btn_exit = QPushButton("–í—ã—Ö–æ–¥")

        btn_layout.addWidget(self.btn_login)
        btn_layout.addWidget(self.btn_exit)
        main_layout.addLayout(btn_layout)

        self.btn_login.clicked.connect(self.auth)
        self.btn_exit.clicked.connect(self.close)

    def auth(self):
        login = self.edit_login.text()
        password = self.edit_pass.text()

        # –°–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: –ª–æ–≥–∏–Ω -> (–ø–∞—Ä–æ–ª—å, —Ä–æ–ª—å, –ø–æ–ª–Ω–æ–µ_–∏–º—è)
        users = {
            "admin": ("admin", "admin", "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã"),
            "zavuch": ("zavuch", "zavuch", "–ó–∞–≤—É—á —à–∫–æ–ª—ã"),
            #    "director": ("director", "zavuch", "–î–∏—Ä–µ–∫—Ç–æ—Ä —à–∫–æ–ª—ã")
        }

        if login in users and users[login][0] == password:
            user_role = users[login][1]
            user_name = users[login][2]
            self.app = MainApp(self.db, user_role, user_name)
            self.app.show()
            self.close()
        else:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")



class MainApp(QMainWindow):
    def __init__(self, db, user_role='admin', user_name='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'):
        super().__init__()
        self.setStyleSheet(APP_STYLE)
        self.db = db
        self.user_role = user_role  # –î–û–ë–ê–í–ò–¢–¨
        self.user_name = user_name  # –î–û–ë–ê–í–ò–¢–¨

        self.setWindowTitle(f"–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∫–æ–ª–æ–π - {user_name} ({self.get_role_name()})")
        self.setGeometry(100, 100, 1200, 800)

        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
        self.tabs = QTabWidget()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∫–ª–∞–¥–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        self.init_tabs_by_role()

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.init_toolbar()

        main_layout = QVBoxLayout()
        main_layout.addLayout(self.toolbar_layout)
        main_layout.addWidget(self.tabs)

        container = QWidget()
        container.setLayout(main_layout)
        self.setCentralWidget(container)

    def get_role_name(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏"""
        role_names = {
            'admin': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
            'zavuch': '–ó–∞–≤—É—á'
        }
        return role_names.get(self.user_role, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')

    def init_tabs_by_role(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∫–ª–∞–¥–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if self.user_role == 'admin':
            # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤–∏–¥–∏—Ç –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏ —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º
            self.init_students_tab()
            self.init_teachers_tab()
            self.init_classes_tab()
            self.init_subjects_tab()
            self.init_lessons_tab()
            self.init_grades_tab()
            self.init_progress_tab()
            self.init_reports_tab()
        elif self.user_role == 'zavuch':
            # –ó–∞–≤—É—á –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –æ—Ç—á–µ—Ç—ã
            self.init_students_tab_readonly()
            self.init_teachers_tab_readonly()
            self.init_classes_tab_readonly()
            self.init_subjects_tab_readonly()
            self.init_lessons_tab_readonly()
            self.init_grades_tab_readonly()
            self.init_progress_tab_readonly()
            self.init_reports_tab()

    def init_toolbar(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º —Ä–æ–ª–µ–π"""
        self.toolbar_layout = QHBoxLayout()

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = QLabel(f"üë§ {self.user_name} ({self.get_role_name()})")
        user_info.setStyleSheet("font-weight: bold; color: #5E3023; padding: 5px;")

        self.toolbar_layout.addWidget(user_info)
        self.toolbar_layout.addStretch()

        # –ö–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ (–¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ–º)
        self.btn_export_pdf = QPushButton("–≠–∫—Å–ø–æ—Ä—Ç PDF")
        self.btn_export_csv = QPushButton("–≠–∫—Å–ø–æ—Ä—Ç CSV")
        self.btn_logout = QPushButton("–í—ã—Ö–æ–¥")

        self.toolbar_layout.addWidget(self.btn_export_pdf)
        self.toolbar_layout.addWidget(self.btn_export_csv)
        self.toolbar_layout.addWidget(self.btn_logout)

        self.btn_export_csv.clicked.connect(self.export_current_tab_to_csv)
        self.btn_export_pdf.clicked.connect(self.export_current_tab_to_pdf)
        self.btn_logout.clicked.connect(self.logout)

    def init_students_tab_readonly(self):
        """–í–∫–ª–∞–¥–∫–∞ —É—á–µ–Ω–∏–∫–æ–≤ —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è"""
        tab = QWidget()
        layout = QVBoxLayout()

        # –ü–æ–∏—Å–∫
        search_layout = QHBoxLayout()
        self.student_search = QLineEdit()
        self.student_search.setPlaceholderText("–ü–æ–∏—Å–∫ —É—á–µ–Ω–∏–∫–æ–≤...")
        self.student_search.textChanged.connect(self.load_students)
        search_layout.addWidget(QLabel("–ü–æ–∏—Å–∫:"))
        search_layout.addWidget(self.student_search)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –∑–∞–≤—É—á–∞
        info_label = QLabel("üëÅÔ∏è –†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–∑–∞–≤—É—á)")
        info_label.setStyleSheet("background-color: #E8D5C4; padding: 8px; border-radius: 4px; font-weight: bold;")

        # –¢–∞–±–ª–∏—Ü–∞
        self.students_table = QTableWidget()
        self.students_table.setColumnCount(6)
        self.students_table.setHorizontalHeaderLabels([
            "–§–∞–º–∏–ª–∏—è", "–ò–º—è", "–û—Ç—á–µ—Å—Ç–≤–æ", "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", "–ü–æ–ª", "–ö–ª–∞—Å—Å"
        ])
        self.students_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)

        layout.addLayout(search_layout)
        layout.addWidget(info_label)
        layout.addWidget(self.students_table)
        tab.setLayout(layout)

        self.tabs.addTab(tab, "–£—á–µ–Ω–∏–∫–∏")
        self.load_students()

    def init_teachers_tab_readonly(self):
        """–í–∫–ª–∞–¥–∫–∞ —É—á–∏—Ç–µ–ª–µ–π —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è"""
        tab = QWidget()
        layout = QVBoxLayout()

        # –ü–æ–∏—Å–∫
        search_layout = QHBoxLayout()
        self.teacher_search = QLineEdit()
        self.teacher_search.setPlaceholderText("–ü–æ–∏—Å–∫ —É—á–∏—Ç–µ–ª–µ–π...")
        self.teacher_search.textChanged.connect(self.load_teachers)
        search_layout.addWidget(QLabel("–ü–æ–∏—Å–∫:"))
        search_layout.addWidget(self.teacher_search)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –∑–∞–≤—É—á–∞
        info_label = QLabel("üëÅÔ∏è –†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–∑–∞–≤—É—á)")
        info_label.setStyleSheet("background-color: #E8D5C4; padding: 8px; border-radius: 4px; font-weight: bold;")

        # –¢–∞–±–ª–∏—Ü–∞
        self.teachers_table = QTableWidget()
        self.teachers_table.setColumnCount(5)
        self.teachers_table.setHorizontalHeaderLabels([
            "–§–∞–º–∏–ª–∏—è", "–ò–º—è", "–û—Ç—á–µ—Å—Ç–≤–æ", "–ó–∞—Ä–ø–ª–∞—Ç–∞", "–ù–µ–¥–µ–ª—å–Ω—ã–µ —á–∞—Å—ã"
        ])
        self.teachers_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)

        layout.addLayout(search_layout)
        layout.addWidget(info_label)
        layout.addWidget(self.teachers_table)
        tab.setLayout(layout)

        self.tabs.addTab(tab, "–£—á–∏—Ç–µ–ª—è")
        self.load_teachers()

    def init_classes_tab_readonly(self):
        """–í–∫–ª–∞–¥–∫–∞ –∫–ª–∞—Å—Å–æ–≤ —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è"""
        tab = QWidget()
        layout = QVBoxLayout()

        # –ü–æ–∏—Å–∫
        search_layout = QHBoxLayout()
        self.class_search = QLineEdit()
        self.class_search.setPlaceholderText("–ü–æ–∏—Å–∫ –∫–ª–∞—Å—Å–æ–≤...")
        self.class_search.textChanged.connect(self.load_classes)
        search_layout.addWidget(QLabel("–ü–æ–∏—Å–∫:"))
        search_layout.addWidget(self.class_search)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –∑–∞–≤—É—á–∞
        info_label = QLabel("üëÅÔ∏è –†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–∑–∞–≤—É—á)")
        info_label.setStyleSheet("background-color: #E8D5C4; padding: 8px; border-radius: 4px; font-weight: bold;")

        # –¢–∞–±–ª–∏—Ü–∞
        self.classes_table = QTableWidget()
        self.classes_table.setColumnCount(4)
        self.classes_table.setHorizontalHeaderLabels([
            "–ù–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–µ–Ω–∏–∫–æ–≤", "–ö–ª–∞—Å—Å–Ω—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å", "–ö–∞–±–∏–Ω–µ—Ç"
        ])
        self.classes_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)

        layout.addLayout(search_layout)
        layout.addWidget(info_label)
        layout.addWidget(self.classes_table)
        tab.setLayout(layout)

        self.tabs.addTab(tab, "–ö–ª–∞—Å—Å—ã")
        self.load_classes()

    def init_subjects_tab_readonly(self):
        """–í–∫–ª–∞–¥–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è"""
        tab = QWidget()
        layout = QVBoxLayout()

        # –ü–æ–∏—Å–∫
        search_layout = QHBoxLayout()
        self.subject_search = QLineEdit()
        self.subject_search.setPlaceholderText("–ü–æ–∏—Å–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤...")
        self.subject_search.textChanged.connect(self.load_subjects)
        search_layout.addWidget(QLabel("–ü–æ–∏—Å–∫:"))
        search_layout.addWidget(self.subject_search)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –∑–∞–≤—É—á–∞
        info_label = QLabel("üëÅÔ∏è –†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–∑–∞–≤—É—á)")
        info_label.setStyleSheet("background-color: #E8D5C4; padding: 8px; border-radius: 4px; font-weight: bold;")

        # –¢–∞–±–ª–∏—Ü–∞
        self.subjects_table = QTableWidget()
        self.subjects_table.setColumnCount(3)
        self.subjects_table.setHorizontalHeaderLabels([
            "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞", "–£—á–∏—Ç–µ–ª—å", "–ù–µ–¥–µ–ª—å–Ω—ã–µ —á–∞—Å—ã"
        ])
        self.subjects_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)

        layout.addLayout(search_layout)
        layout.addWidget(info_label)
        layout.addWidget(self.subjects_table)
        tab.setLayout(layout)

        self.tabs.addTab(tab, "–ü—Ä–µ–¥–º–µ—Ç—ã")
        self.load_subjects()

    def init_lessons_tab_readonly(self):
        """–í–∫–ª–∞–¥–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è"""
        tab = QWidget()
        layout = QVBoxLayout()

        # –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã
        filter_layout = QHBoxLayout()

        self.lesson_search = QLineEdit()
        self.lesson_search.setPlaceholderText("–ü–æ–∏—Å–∫ —É—Ä–æ–∫–æ–≤...")
        self.lesson_search.textChanged.connect(self.load_lessons)

        self.lesson_class_filter = QComboBox()
        self.load_classes_for_lessons()
        self.lesson_class_filter.currentIndexChanged.connect(self.load_lessons)

        self.lesson_day_filter = QComboBox()
        self.lesson_day_filter.addItem("–í—Å–µ –¥–Ω–∏", None)
        self.lesson_day_filter.addItems([
            "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞"
        ])
        self.lesson_day_filter.currentIndexChanged.connect(self.load_lessons)

        filter_layout.addWidget(QLabel("–ü–æ–∏—Å–∫:"))
        filter_layout.addWidget(self.lesson_search)
        filter_layout.addWidget(QLabel("–ö–ª–∞—Å—Å:"))
        filter_layout.addWidget(self.lesson_class_filter)
        filter_layout.addWidget(QLabel("–î–µ–Ω—å:"))
        filter_layout.addWidget(self.lesson_day_filter)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –∑–∞–≤—É—á–∞
        info_label = QLabel("üëÅÔ∏è –†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–∑–∞–≤—É—á)")
        info_label.setStyleSheet("background-color: #E8D5C4; padding: 8px; border-radius: 4px; font-weight: bold;")

        # –¢–∞–±–ª–∏—Ü–∞
        self.lessons_table = QTableWidget()
        self.lessons_table.setColumnCount(6)
        self.lessons_table.setHorizontalHeaderLabels([
            "–ö–ª–∞—Å—Å", "–ü—Ä–µ–¥–º–µ—Ç", "–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏", "–í—Ä–µ–º—è", "–ö–∞–±–∏–Ω–µ—Ç", "–£—á–∏—Ç–µ–ª—å"
        ])
        self.lessons_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)

        layout.addLayout(filter_layout)
        layout.addWidget(info_label)
        layout.addWidget(self.lessons_table)
        tab.setLayout(layout)

        self.tabs.addTab(tab, "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
        self.load_lessons()

    def init_grades_tab_readonly(self):
        """–í–∫–ª–∞–¥–∫–∞ –æ—Ü–µ–Ω–æ–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è"""
        tab = QWidget()
        layout = QVBoxLayout()

        # –§–∏–ª—å—Ç—Ä—ã
        filter_layout = QVBoxLayout()

        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ - –æ–±—â–∏–π –ø–æ–∏—Å–∫
        search_layout = QHBoxLayout()
        self.grade_search = QLineEdit()
        self.grade_search.setPlaceholderText("–ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º...")
        self.grade_search.textChanged.connect(self.load_grades)
        search_layout.addWidget(QLabel("–ü–æ–∏—Å–∫:"))
        search_layout.addWidget(self.grade_search)

        # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ - —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        specific_filters_layout = QHBoxLayout()

        self.grade_student_filter = QComboBox()
        self.load_students_for_grades()
        self.grade_student_filter.currentIndexChanged.connect(self.load_grades)

        self.grade_date_filter = QComboBox()
        self.load_dates_for_grades()
        self.grade_date_filter.currentIndexChanged.connect(self.load_grades)

        self.grade_subject_filter = QComboBox()
        self.load_subjects_for_grades()
        self.grade_subject_filter.currentIndexChanged.connect(self.load_grades)

        specific_filters_layout.addWidget(QLabel("–£—á–µ–Ω–∏–∫:"))
        specific_filters_layout.addWidget(self.grade_student_filter)
        specific_filters_layout.addWidget(QLabel("–î–∞—Ç–∞:"))
        specific_filters_layout.addWidget(self.grade_date_filter)
        specific_filters_layout.addWidget(QLabel("–ü—Ä–µ–¥–º–µ—Ç:"))
        specific_filters_layout.addWidget(self.grade_subject_filter)

        self.btn_reset_filters = QPushButton("–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã")
        self.btn_reset_filters.clicked.connect(self.reset_grade_filters)
        specific_filters_layout.addWidget(self.btn_reset_filters)

        filter_layout.addLayout(search_layout)
        filter_layout.addLayout(specific_filters_layout)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –∑–∞–≤—É—á–∞
        info_label = QLabel("üëÅÔ∏è –†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–∑–∞–≤—É—á)")
        info_label.setStyleSheet("background-color: #E8D5C4; padding: 8px; border-radius: 4px; font-weight: bold;")

        # –¢–∞–±–ª–∏—Ü–∞
        self.grades_table = QTableWidget()
        self.grades_table.setColumnCount(6)
        self.grades_table.setHorizontalHeaderLabels([
            "–£—á–µ–Ω–∏–∫", "–ü—Ä–µ–¥–º–µ—Ç", "–û—Ü–µ–Ω–∫–∞", "–î–∞—Ç–∞", "–¢–∏–ø", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
        ])
        self.grades_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)

        layout.addLayout(filter_layout)
        layout.addWidget(info_label)
        layout.addWidget(self.grades_table)
        tab.setLayout(layout)

        self.tabs.addTab(tab, "–û—Ü–µ–Ω–∫–∏")
        self.load_grades()

    def init_progress_tab_readonly(self):
        """–í–∫–ª–∞–¥–∫–∞ –∏—Ç–æ–≥–æ–≤—ã—Ö –æ—Ü–µ–Ω–æ–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è"""
        tab = QWidget()
        layout = QVBoxLayout()

        # –§–∏–ª—å—Ç—Ä—ã
        filter_layout = QVBoxLayout()

        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –æ–±—â–∏–π –ø–æ–∏—Å–∫
        search_layout = QHBoxLayout()
        self.progress_search = QLineEdit()
        self.progress_search.setPlaceholderText("–ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º...")
        self.progress_search.textChanged.connect(self.load_progress)
        search_layout.addWidget(QLabel("–ü–æ–∏—Å–∫:"))
        search_layout.addWidget(self.progress_search)

        # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ - —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        specific_filters_layout = QHBoxLayout()

        self.progress_student_filter = QComboBox()
        self.load_students_for_progress()
        self.progress_student_filter.currentIndexChanged.connect(self.load_progress)

        self.progress_period_filter = QComboBox()
        self.progress_period_filter.addItem("–í—Å–µ –ø–µ—Ä–∏–æ–¥—ã", None)
        self.progress_period_filter.addItem("—á–µ—Ç–≤–µ—Ä—Ç—å", "—á–µ—Ç–≤–µ—Ä—Ç—å")
        self.progress_period_filter.addItem("–ø–æ–ª—É–≥–æ–¥–∏–µ", "–ø–æ–ª—É–≥–æ–¥–∏–µ")
        self.progress_period_filter.addItem("–≥–æ–¥", "–≥–æ–¥")
        self.progress_period_filter.currentIndexChanged.connect(self.load_progress)

        self.progress_year_filter = QComboBox()
        self.load_years_for_progress()
        self.progress_year_filter.currentIndexChanged.connect(self.load_progress)

        self.progress_subject_filter = QComboBox()
        self.load_subjects_for_progress()
        self.progress_subject_filter.currentIndexChanged.connect(self.load_progress)

        specific_filters_layout.addWidget(QLabel("–£—á–µ–Ω–∏–∫:"))
        specific_filters_layout.addWidget(self.progress_student_filter)
        specific_filters_layout.addWidget(QLabel("–ü–µ—Ä–∏–æ–¥:"))
        specific_filters_layout.addWidget(self.progress_period_filter)
        specific_filters_layout.addWidget(QLabel("–£—á–µ–±–Ω—ã–π –≥–æ–¥:"))
        specific_filters_layout.addWidget(self.progress_year_filter)
        specific_filters_layout.addWidget(QLabel("–ü—Ä–µ–¥–º–µ—Ç:"))
        specific_filters_layout.addWidget(self.progress_subject_filter)

        self.btn_reset_progress_filters = QPushButton("–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã")
        self.btn_reset_progress_filters.clicked.connect(self.reset_progress_filters)
        specific_filters_layout.addWidget(self.btn_reset_progress_filters)

        filter_layout.addLayout(search_layout)
        filter_layout.addLayout(specific_filters_layout)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –∑–∞–≤—É—á–∞
        info_label = QLabel("üëÅÔ∏è –†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–∑–∞–≤—É—á)")
        info_label.setStyleSheet("background-color: #E8D5C4; padding: 8px; border-radius: 4px; font-weight: bold;")

        # –¢–∞–±–ª–∏—Ü–∞
        self.progress_table = QTableWidget()
        self.progress_table.setColumnCount(7)
        self.progress_table.setHorizontalHeaderLabels([
            "–£—á–µ–Ω–∏–∫", "–ü—Ä–µ–¥–º–µ—Ç", "–ü–µ—Ä–∏–æ–¥", "–ù–æ–º–µ—Ä –ø–µ—Ä–∏–æ–¥–∞", "–£—á–µ–±–Ω—ã–π –≥–æ–¥", "–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª", "–ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞"
        ])
        self.progress_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)

        layout.addLayout(filter_layout)
        layout.addWidget(info_label)
        layout.addWidget(self.progress_table)
        tab.setLayout(layout)

        self.tabs.addTab(tab, "–ò—Ç–æ–≥–æ–≤—ã–µ –æ—Ü–µ–Ω–∫–∏")
        self.load_progress()



    def init_students_tab(self):
        tab = QWidget()
        layout = QVBoxLayout()

        # –ü–æ–∏—Å–∫
        search_layout = QHBoxLayout()
        self.student_search = QLineEdit()
        self.student_search.setPlaceholderText("–ü–æ–∏—Å–∫ —É—á–µ–Ω–∏–∫–æ–≤...")
        self.student_search.textChanged.connect(self.load_students)
        search_layout.addWidget(QLabel("–ü–æ–∏—Å–∫:"))
        search_layout.addWidget(self.student_search)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        btn_layout = QHBoxLayout()
        self.btn_add_student = QPushButton("–î–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞")
        self.btn_edit_student = QPushButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
        self.btn_delete_student = QPushButton("–£–¥–∞–ª–∏—Ç—å")

        btn_layout.addWidget(self.btn_add_student)
        btn_layout.addWidget(self.btn_edit_student)
        btn_layout.addWidget(self.btn_delete_student)
        btn_layout.addStretch()

        # –¢–∞–±–ª–∏—Ü–∞
        self.students_table = QTableWidget()
        self.students_table.setColumnCount(6)
        self.students_table.setHorizontalHeaderLabels([
            "–§–∞–º–∏–ª–∏—è", "–ò–º—è", "–û—Ç—á–µ—Å—Ç–≤–æ", "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", "–ü–æ–ª", "–ö–ª–∞—Å—Å"
        ])
        self.students_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)

        layout.addLayout(search_layout)
        layout.addLayout(btn_layout)
        layout.addWidget(self.students_table)
        tab.setLayout(layout)

        self.tabs.addTab(tab, "–£—á–µ–Ω–∏–∫–∏")

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        self.btn_add_student.clicked.connect(self.add_student)
        self.btn_edit_student.clicked.connect(self.edit_student)
        self.btn_delete_student.clicked.connect(self.delete_student)

        self.load_students()

    def load_students(self):
        search_text = self.student_search.text()
        query = """
                SELECT s.student_id, \
                       s.last_name, \
                       s.first_name, \
                       s.middle_name,
                       s.birth_date, \
                       s.gender, \
                       c.class_number
                FROM students s
                         LEFT JOIN classes c ON s.class_id = c.class_id
                WHERE s.last_name ILIKE %s \
                   OR s.first_name ILIKE %s \
                   OR s.middle_name ILIKE %s
                   OR c.class_number ILIKE %s \
                   OR s.gender ILIKE %s
                   OR TO_CHAR(s.birth_date \
                    , 'DD.MM.YYYY') ILIKE %s
                ORDER BY s.last_name, s.first_name \
                """
        search_param = f"%{search_text}%"
        data = self.db.execute(query,
                               (search_param, search_param, search_param, search_param, search_param, search_param))

        self.students_table.setRowCount(len(data))
        for row_idx, row in enumerate(data):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º student_id –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏
            for col_idx in range(1, len(row)):
                value = row[col_idx]
                if col_idx == 4 and value:  # –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
                    value = value.strftime("%d.%m.%Y")
                item = QTableWidgetItem(str(value) if value else "")
                item.setData(Qt.UserRole, row[0])  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π
                self.students_table.setItem(row_idx, col_idx - 1, item)

    def add_student(self):
        dialog = StudentDialog(self.db)
        if dialog.exec_() == QDialog.Accepted:
            self.load_students()
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–∫–∂–µ —Ç–∞–±–ª–∏—Ü—É –∫–ª–∞—Å—Å–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –≤–∏–¥–∏–º–∞
            try:
                self.load_classes()
            except:
                pass  # –ï—Å–ª–∏ –º–µ—Ç–æ–¥ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º


    def edit_student(self):
        current_row = self.students_table.currentRow()
        if current_row < 0:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return

        student_id = self.students_table.item(current_row, 0).data(Qt.UserRole)
        dialog = StudentDialog(self.db, student_id)
        if dialog.exec_() == QDialog.Accepted:
            self.load_students()
            try:
                self.load_classes()  # –î–û–ë–ê–í–ò–õ –≠–¢–£ –°–¢–†–û–ö–£
            except:
                pass

    def delete_student(self):
        current_row = self.students_table.currentRow()
        if current_row < 0:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        student_id = self.students_table.item(current_row, 0).data(Qt.UserRole)

        reply = QMessageBox.question(self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                                     "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ —É—á–µ–Ω–∏–∫–∞?\n"
                                     "–í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏ —Ç–∞–∫–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.",
                                     QMessageBox.Yes | QMessageBox.No)
        if reply == QMessageBox.Yes:
            try:
                self.db.execute("DELETE FROM students WHERE student_id = %s", (student_id,), fetch=False)
                self.load_students()
                try:
                    self.load_classes()  # –î–û–ë–ê–í–ò–õ –≠–¢–£ –°–¢–†–û–ö–£
                except:
                    pass
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–£—á–µ–Ω–∏–∫ —É–¥–∞–ª–µ–Ω")
            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —É—á–µ–Ω–∏–∫–∞:\n{str(e)}")


    def init_teachers_tab(self):
        tab = QWidget()
        layout = QVBoxLayout()

        # –ü–æ–∏—Å–∫
        search_layout = QHBoxLayout()
        self.teacher_search = QLineEdit()
        self.teacher_search.setPlaceholderText("–ü–æ–∏—Å–∫ —É—á–∏—Ç–µ–ª–µ–π...")
        self.teacher_search.textChanged.connect(self.load_teachers)
        search_layout.addWidget(QLabel("–ü–æ–∏—Å–∫:"))
        search_layout.addWidget(self.teacher_search)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        btn_layout = QHBoxLayout()
        self.btn_add_teacher = QPushButton("–î–æ–±–∞–≤–∏—Ç—å —É—á–∏—Ç–µ–ª—è")
        self.btn_edit_teacher = QPushButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
        self.btn_delete_teacher = QPushButton("–£–¥–∞–ª–∏—Ç—å")  # –î–û–ë–ê–í–ò–õ–ò –ö–ù–û–ü–ö–£ –£–î–ê–õ–ò–¢–¨

        btn_layout.addWidget(self.btn_add_teacher)
        btn_layout.addWidget(self.btn_edit_teacher)
        btn_layout.addWidget(self.btn_delete_teacher)  # –î–û–ë–ê–í–ò–õ–ò –í –õ–ï–ô–ê–£–¢
        btn_layout.addStretch()

        # –¢–∞–±–ª–∏—Ü–∞
        self.teachers_table = QTableWidget()
        self.teachers_table.setColumnCount(5)
        self.teachers_table.setHorizontalHeaderLabels([
            "–§–∞–º–∏–ª–∏—è", "–ò–º—è", "–û—Ç—á–µ—Å—Ç–≤–æ", "–ó–∞—Ä–ø–ª–∞—Ç–∞", "–ù–µ–¥–µ–ª—å–Ω—ã–µ —á–∞—Å—ã"
        ])
        self.teachers_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)

        layout.addLayout(search_layout)
        layout.addLayout(btn_layout)
        layout.addWidget(self.teachers_table)
        tab.setLayout(layout)

        self.tabs.addTab(tab, "–£—á–∏—Ç–µ–ª—è")

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        self.btn_add_teacher.clicked.connect(self.add_teacher)
        self.btn_edit_teacher.clicked.connect(self.edit_teacher)
        self.btn_delete_teacher.clicked.connect(self.delete_teacher)  # –ü–û–î–ö–õ–Æ–ß–ò–õ–ò –°–û–ë–´–¢–ò–ï

        self.load_teachers()




    def load_teachers(self):
        search_text = self.teacher_search.text()
        query = """
                SELECT teacher_id, last_name, first_name, middle_name, salary, weekly_hours
                FROM teachers
                WHERE last_name ILIKE %s \
                   OR first_name ILIKE %s
                ORDER BY last_name, first_name \
                """
        search_param = f"%{search_text}%"
        data = self.db.execute(query, (search_param, search_param))

        self.teachers_table.setRowCount(len(data))
        for row_idx, row in enumerate(data):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º teacher_id –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏
            for col_idx in range(1, len(row)):
                value = row[col_idx]
                item = QTableWidgetItem(str(value) if value else "")
                item.setData(Qt.UserRole, row[0])  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID
                self.teachers_table.setItem(row_idx, col_idx - 1, item)

    def add_teacher(self):
        dialog = TeacherDialog(self.db)
        if dialog.exec_() == QDialog.Accepted:
            self.load_teachers()

    def edit_teacher(self):
        current_row = self.teachers_table.currentRow()
        if current_row < 0:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∏—Ç–µ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return

        teacher_id = self.teachers_table.item(current_row, 0).data(Qt.UserRole)
        dialog = TeacherDialog(self.db, teacher_id)
        if dialog.exec_() == QDialog.Accepted:
            self.load_teachers()


    def delete_teacher(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—á–∏—Ç–µ–ª—è"""
        current_row = self.teachers_table.currentRow()
        if current_row < 0:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∏—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        teacher_id = self.teachers_table.item(current_row, 0).data(Qt.UserRole)

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∏—Ç–µ–ª–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        teacher_info = self.db.execute(
            "SELECT last_name, first_name, middle_name FROM teachers WHERE teacher_id = %s",
            (teacher_id,)
        )

        if not teacher_info:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–£—á–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        teacher_name = f"{teacher_info[0][0]} {teacher_info[0][1]} {teacher_info[0][2] or ''}".strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω –ª–∏ —É—á–∏—Ç–µ–ª—å —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ –∏–ª–∏ –∫–ª–∞—Å—Å–∞–º–∏
        subjects_count = self.db.execute(
            "SELECT COUNT(*) FROM subjects WHERE teacher_id = %s", (teacher_id,)
        )[0][0]

        classes_count = self.db.execute(
            "SELECT COUNT(*) FROM classes WHERE homeroom_teacher_id = %s", (teacher_id,)
        )[0][0]

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏
        warning_message = f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —É—á–∏—Ç–µ–ª—è {teacher_name}?"

        if subjects_count > 0:
            warning_message += f"\n\n–í–ù–ò–ú–ê–ù–ò–ï: –£ —ç—Ç–æ–≥–æ —É—á–∏—Ç–µ–ª—è –µ—Å—Ç—å {subjects_count} –ø—Ä–µ–¥–º–µ—Ç(–æ–≤)."
            warning_message += "\n–ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—á–∏—Ç–µ–ª—è, —É —ç—Ç–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å."

        if classes_count > 0:
            warning_message += f"\n\n–í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç —É—á–∏—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∫–ª–∞—Å—Å–Ω—ã–º —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º {classes_count} –∫–ª–∞—Å—Å–∞(–æ–≤)."
            warning_message += "\n–ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—á–∏—Ç–µ–ª—è, —É —ç—Ç–∏—Ö –∫–ª–∞—Å—Å–æ–≤ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –∫–ª–∞—Å—Å–Ω—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å."

        warning_message += "\n\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ?"

        reply = QMessageBox.question(
            self,
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è",
            warning_message,
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "–ù–µ—Ç"
        )

        if reply == QMessageBox.Yes:
            try:
                # –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                self.db.cursor.execute("BEGIN")

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã - —É–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —É—á–∏—Ç–µ–ª—è
                if subjects_count > 0:
                    self.db.execute(
                        "UPDATE subjects SET teacher_id = NULL WHERE teacher_id = %s",
                        (teacher_id,),
                        fetch=False
                    )

                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞—Å—Å—ã - —É–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–ª–∞—Å—Å–Ω–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
                if classes_count > 0:
                    self.db.execute(
                        "UPDATE classes SET homeroom_teacher_id = NULL WHERE homeroom_teacher_id = %s",
                        (teacher_id,),
                        fetch=False
                    )

                # –£–¥–∞–ª—è–µ–º –æ—Ü–µ–Ω–∫–∏, –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —ç—Ç–∏–º —É—á–∏—Ç–µ–ª–µ–º
                self.db.execute(
                    "DELETE FROM grades WHERE teacher_id = %s",
                    (teacher_id,),
                    fetch=False
                )

                # –£–¥–∞–ª—è–µ–º —Å–∞–º–æ–≥–æ —É—á–∏—Ç–µ–ª—è
                self.db.execute(
                    "DELETE FROM teachers WHERE teacher_id = %s",
                    (teacher_id,),
                    fetch=False
                )

                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                self.db.conn.commit()

                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
                self.load_teachers()
                try:
                    self.load_subjects()  # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã
                    self.load_classes()  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞—Å—Å—ã
                except:
                    pass  # –ï—Å–ª–∏ –º–µ—Ç–æ–¥—ã –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

                QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–£—á–∏—Ç–µ–ª—å {teacher_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")

            except Exception as e:
                # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                self.db.conn.rollback()
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —É—á–∏—Ç–µ–ª—è:\n{str(e)}")




    def init_classes_tab(self):
        tab = QWidget()
        layout = QVBoxLayout()

        # –ü–æ–∏—Å–∫
        search_layout = QHBoxLayout()
        self.class_search = QLineEdit()
        self.class_search.setPlaceholderText("–ü–æ–∏—Å–∫ –∫–ª–∞—Å—Å–æ–≤...")
        self.class_search.textChanged.connect(self.load_classes)
        search_layout.addWidget(QLabel("–ü–æ–∏—Å–∫:"))
        search_layout.addWidget(self.class_search)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        btn_layout = QHBoxLayout()
        self.btn_add_class = QPushButton("–î–æ–±–∞–≤–∏—Ç—å –∫–ª–∞—Å—Å")
        self.btn_edit_class = QPushButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
        self.btn_delete_class = QPushButton("–£–¥–∞–ª–∏—Ç—å")  # –î–û–ë–ê–í–ò–õ–ò –ö–ù–û–ü–ö–£ –£–î–ê–õ–ò–¢–¨

        btn_layout.addWidget(self.btn_add_class)
        btn_layout.addWidget(self.btn_edit_class)
        btn_layout.addWidget(self.btn_delete_class)  # –î–û–ë–ê–í–ò–õ–ò –í –õ–ï–ô–ê–£–¢
        btn_layout.addStretch()

        # –¢–∞–±–ª–∏—Ü–∞
        self.classes_table = QTableWidget()
        self.classes_table.setColumnCount(4)
        self.classes_table.setHorizontalHeaderLabels([
            "–ù–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–µ–Ω–∏–∫–æ–≤", "–ö–ª–∞—Å—Å–Ω—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å", "–ö–∞–±–∏–Ω–µ—Ç"
        ])
        self.classes_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)

        layout.addLayout(search_layout)
        layout.addLayout(btn_layout)
        layout.addWidget(self.classes_table)
        tab.setLayout(layout)

        self.tabs.addTab(tab, "–ö–ª–∞—Å—Å—ã")

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        self.btn_add_class.clicked.connect(self.add_class)
        self.btn_edit_class.clicked.connect(self.edit_class)
        self.btn_delete_class.clicked.connect(self.delete_class)  # –ü–û–î–ö–õ–Æ–ß–ò–õ–ò –°–û–ë–´–¢–ò–ï

        self.load_classes()

    def delete_class(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞"""
        current_row = self.classes_table.currentRow()
        if current_row < 0:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        class_id = self.classes_table.item(current_row, 0).data(Qt.UserRole)

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞—Å—Å–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        class_info = self.db.execute(
            "SELECT class_number, student_count FROM classes WHERE class_id = %s",
            (class_id,)
        )

        if not class_info:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ö–ª–∞—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        class_number = class_info[0][0]
        student_count = class_info[0][1] or 0

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É—á–µ–Ω–∏–∫–∏ –≤ —ç—Ç–æ–º –∫–ª–∞—Å—Å–µ
        actual_students = self.db.execute(
            "SELECT COUNT(*) FROM students WHERE class_id = %s", (class_id,)
        )[0][0]

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        students_list = []
        if actual_students > 0:
            students = self.db.execute("""
                                       SELECT CONCAT(last_name, ' ', first_name, ' ', COALESCE(middle_name, '')) as full_name
                                       FROM students
                                       WHERE class_id = %s
                                       ORDER BY last_name, first_name LIMIT 10
                                       """, (class_id,))
            students_list = [student[0] for student in students]

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏
        warning_message = f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–ª–∞—Å—Å {class_number}?"

        if actual_students > 0:
            warning_message += f"\n\n–í–ù–ò–ú–ê–ù–ò–ï: –í —ç—Ç–æ–º –∫–ª–∞—Å—Å–µ —É—á–∏—Ç—Å—è {actual_students} —É—á–µ–Ω–∏–∫(–æ–≤):"
            for i, student_name in enumerate(students_list):
                if i < 5:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 5 —É—á–µ–Ω–∏–∫–æ–≤
                    warning_message += f"\n‚Ä¢ {student_name}"
                elif i == 5:
                    warning_message += f"\n‚Ä¢ ... –∏ –µ—â–µ {actual_students - 5} —É—á–µ–Ω–∏–∫(–æ–≤)"
                    break

            warning_message += "\n\n–ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª–∞—Å—Å–∞:"
            warning_message += "\n- –í—Å–µ —É—á–µ–Ω–∏–∫–∏ —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞ –±—É–¥—É—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ —Å—Ç–∞—Ç—É—Å '–ë–µ–∑ –∫–ª–∞—Å—Å–∞'"
            warning_message += "\n- –í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–± —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è"
        else:
            warning_message += f"\n\n–ö–ª–∞—Å—Å –ø—É—Å—Ç–æ–π (–Ω–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤), —É–¥–∞–ª–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ."

        warning_message += "\n\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ?"

        reply = QMessageBox.question(
            self,
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è",
            warning_message,
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "–ù–µ—Ç"
        )

        if reply == QMessageBox.Yes:
            try:
                # –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                self.db.cursor.execute("BEGIN")

                # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤ –≤ —Å—Ç–∞—Ç—É—Å "–ë–µ–∑ –∫–ª–∞—Å—Å–∞"
                if actual_students > 0:
                    self.db.execute(
                        "UPDATE students SET class_id = NULL WHERE class_id = %s",
                        (class_id,),
                        fetch=False
                    )

                # –£–¥–∞–ª—è–µ–º –∫–ª–∞—Å—Å
                self.db.execute(
                    "DELETE FROM classes WHERE class_id = %s",
                    (class_id,),
                    fetch=False
                )

                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                self.db.conn.commit()

                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
                self.load_classes()
                try:
                    self.load_students()  # –û–±–Ω–æ–≤–ª—è–µ–º —É—á–µ–Ω–∏–∫–æ–≤
                except:
                    pass  # –ï—Å–ª–∏ –º–µ—Ç–æ–¥ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

                success_message = f"–ö–ª–∞—Å—Å {class_number} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"
                if actual_students > 0:
                    success_message += f"\n{actual_students} —É—á–µ–Ω–∏–∫(–æ–≤) –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ —Å—Ç–∞—Ç—É—Å '–ë–µ–∑ –∫–ª–∞—Å—Å–∞'"

                QMessageBox.information(self, "–£—Å–ø–µ—Ö", success_message)

            except Exception as e:
                # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                self.db.conn.rollback()
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–ª–∞—Å—Å:\n{str(e)}")



    def load_classes(self):
        search_text = self.class_search.text()
        query = """
                SELECT c.class_id, \
                       c.class_number, \
                       c.student_count,
                       CONCAT(t.last_name, ' ', t.first_name, ' ', COALESCE(t.middle_name, '')) as teacher_name,
                       c.classroom
                FROM classes c
                         LEFT JOIN teachers t ON c.homeroom_teacher_id = t.teacher_id
                WHERE c.class_number ILIKE %s
                ORDER BY c.class_number \
                """
        search_param = f"%{search_text}%"
        data = self.db.execute(query, (search_param,))

        self.classes_table.setRowCount(len(data))
        for row_idx, row in enumerate(data):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º class_id –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏
            for col_idx in range(1, len(row)):
                value = row[col_idx]
                item = QTableWidgetItem(str(value) if value else "")
                item.setData(Qt.UserRole, row[0])  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID
                self.classes_table.setItem(row_idx, col_idx - 1, item)

    def add_class(self):
        dialog = ClassDialog(self.db)
        if dialog.exec_() == QDialog.Accepted:
            self.load_classes()

    def edit_class(self):
        current_row = self.classes_table.currentRow()
        if current_row < 0:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return

        class_id = self.classes_table.item(current_row, 0).data(Qt.UserRole)
        dialog = ClassDialog(self.db, class_id)
        if dialog.exec_() == QDialog.Accepted:
            self.load_classes()


    def init_subjects_tab(self):
        tab = QWidget()
        layout = QVBoxLayout()

        # –ü–æ–∏—Å–∫
        search_layout = QHBoxLayout()
        self.subject_search = QLineEdit()
        self.subject_search.setPlaceholderText("–ü–æ–∏—Å–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤...")
        self.subject_search.textChanged.connect(self.load_subjects)
        search_layout.addWidget(QLabel("–ü–æ–∏—Å–∫:"))
        search_layout.addWidget(self.subject_search)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        btn_layout = QHBoxLayout()
        self.btn_add_subject = QPushButton("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç")
        self.btn_edit_subject = QPushButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
        self.btn_delete_subject = QPushButton("–£–¥–∞–ª–∏—Ç—å")  # –î–û–ë–ê–í–ò–õ–ò –ö–ù–û–ü–ö–£ –£–î–ê–õ–ò–¢–¨

        btn_layout.addWidget(self.btn_add_subject)
        btn_layout.addWidget(self.btn_edit_subject)
        btn_layout.addWidget(self.btn_delete_subject)  # –î–û–ë–ê–í–ò–õ–ò –í –õ–ï–ô–ê–£–¢
        btn_layout.addStretch()

        # –¢–∞–±–ª–∏—Ü–∞
        self.subjects_table = QTableWidget()
        self.subjects_table.setColumnCount(3)
        self.subjects_table.setHorizontalHeaderLabels([
            "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞", "–£—á–∏—Ç–µ–ª—å", "–ù–µ–¥–µ–ª—å–Ω—ã–µ —á–∞—Å—ã"
        ])
        self.subjects_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)

        layout.addLayout(search_layout)
        layout.addLayout(btn_layout)
        layout.addWidget(self.subjects_table)
        tab.setLayout(layout)

        self.tabs.addTab(tab, "–ü—Ä–µ–¥–º–µ—Ç—ã")

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        self.btn_add_subject.clicked.connect(self.add_subject)
        self.btn_edit_subject.clicked.connect(self.edit_subject)
        self.btn_delete_subject.clicked.connect(self.delete_subject)  # –ü–û–î–ö–õ–Æ–ß–ò–õ–ò –°–û–ë–´–¢–ò–ï

        self.load_subjects()

    def delete_subject(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞"""
        current_row = self.subjects_table.currentRow()
        if current_row < 0:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        subject_id = self.subjects_table.item(current_row, 0).data(Qt.UserRole)

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–º–µ—Ç–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        subject_info = self.db.execute(
            "SELECT subject_name, weekly_hours FROM subjects WHERE subject_id = %s",
            (subject_id,)
        )

        if not subject_info:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        subject_name = subject_info[0][0]
        weekly_hours = subject_info[0][1]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫ –ø–æ —ç—Ç–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É
        grades_count = self.db.execute(
            "SELECT COUNT(*) FROM grades WHERE subject_id = %s", (subject_id,)
        )[0][0]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –∏—Ç–æ–≥–æ–≤—ã—Ö –æ—Ü–µ–Ω–∫–∞—Ö
        progress_count = self.db.execute(
            "SELECT COUNT(*) FROM student_progress WHERE subject_id = %s", (subject_id,)
        )[0][0]

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ—Ü–µ–Ω–∫–∞–º
        grades_stats = None
        if grades_count > 0:
            grades_stats = self.db.execute("""
                                           SELECT COUNT(DISTINCT student_id) as students_count,
                                                  MIN(grade_date)            as first_grade_date,
                                                  MAX(grade_date)            as last_grade_date,
                                                  AVG(grade)                 as avg_grade
                                           FROM grades
                                           WHERE subject_id = %s
                                           """, (subject_id,))[0]

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∏—Ç–µ–ª–µ
        teacher_info = self.db.execute("""
                                       SELECT CONCAT(last_name, ' ', first_name, ' ', COALESCE(middle_name, ''))
                                       FROM teachers t
                                                JOIN subjects s ON t.teacher_id = s.teacher_id
                                       WHERE s.subject_id = %s
                                       """, (subject_id,))

        teacher_name = teacher_info[0][0] if teacher_info else "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏
        warning_message = f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç '{subject_name}'?"
        warning_message += f"\n–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher_name}"
        if weekly_hours:
            warning_message += f"\n–ù–µ–¥–µ–ª—å–Ω—ã–µ —á–∞—Å—ã: {weekly_hours}"

        if grades_count > 0:
            warning_message += f"\n\nüö® –í–ù–ò–ú–ê–ù–ò–ï: –ü–æ —ç—Ç–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É –µ—Å—Ç—å {grades_count} –æ—Ü–µ–Ω–æ–∫!"
            if grades_stats:
                warning_message += f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:"
                warning_message += f"\n   ‚Ä¢ –£—á–µ–Ω–∏–∫–æ–≤ —Å –æ—Ü–µ–Ω–∫–∞–º–∏: {grades_stats[0]}"
                warning_message += f"\n   ‚Ä¢ –ü–µ—Ä–∏–æ–¥ –æ—Ü–µ–Ω–æ–∫: —Å {grades_stats[1].strftime('%d.%m.%Y')} –ø–æ {grades_stats[2].strftime('%d.%m.%Y')}"
                warning_message += f"\n   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {grades_stats[3]:.2f}"

        if progress_count > 0:
            warning_message += f"\n\nüìà –í–ù–ò–ú–ê–ù–ò–ï: –ü–æ —ç—Ç–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É –µ—Å—Ç—å {progress_count} –∏—Ç–æ–≥–æ–≤—ã—Ö –æ—Ü–µ–Ω–æ–∫!"

        if grades_count > 0 or progress_count > 0:
            warning_message += "\n\n‚ùå –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ –±—É–¥—É—Ç –ë–ï–ó–í–û–ó–í–†–ê–¢–ù–û —É–¥–∞–ª–µ–Ω—ã:"
            if grades_count > 0:
                warning_message += f"\n   ‚Ä¢ –í—Å–µ {grades_count} –æ—Ü–µ–Ω–æ–∫"
            if progress_count > 0:
                warning_message += f"\n   ‚Ä¢ –í—Å–µ {progress_count} –∏—Ç–æ–≥–æ–≤—ã—Ö –æ—Ü–µ–Ω–æ–∫"
            warning_message += "\n\n‚ö†Ô∏è  –≠–¢–û –î–ï–ô–°–¢–í–ò–ï –ù–ï–õ–¨–ó–Ø –û–¢–ú–ï–ù–ò–¢–¨!"
        else:
            warning_message += "\n\n‚úÖ –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –∏–º–µ–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫, —É–¥–∞–ª–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ."

        warning_message += "\n\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ?"

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Å–µ—Ä—å–µ–∑–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Ü–µ–Ω–∫–∏
        if grades_count > 0 or progress_count > 0:
            reply = QMessageBox.critical(
                self,
                "‚ö†Ô∏è –û–ü–ê–°–ù–û–ï –£–î–ê–õ–ï–ù–ò–ï",
                warning_message,
                QMessageBox.Yes | QMessageBox.No,
                QMessageBox.No  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "–ù–µ—Ç"
            )
        else:
            reply = QMessageBox.question(
                self,
                "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è",
                warning_message,
                QMessageBox.Yes | QMessageBox.No,
                QMessageBox.No  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "–ù–µ—Ç"
            )

        if reply == QMessageBox.Yes:
            try:
                # –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                self.db.cursor.execute("BEGIN")

                # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∏—Ç–æ–≥–æ–≤—ã–µ –æ—Ü–µ–Ω–∫–∏
                if progress_count > 0:
                    self.db.execute(
                        "DELETE FROM student_progress WHERE subject_id = %s",
                        (subject_id,),
                        fetch=False
                    )

                # –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É
                if grades_count > 0:
                    self.db.execute(
                        "DELETE FROM grades WHERE subject_id = %s",
                        (subject_id,),
                        fetch=False
                    )

                # –£–¥–∞–ª—è–µ–º —Å–∞–º –ø—Ä–µ–¥–º–µ—Ç
                self.db.execute(
                    "DELETE FROM subjects WHERE subject_id = %s",
                    (subject_id,),
                    fetch=False
                )

                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                self.db.conn.commit()

                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
                self.load_subjects()
                try:
                    self.load_grades()  # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫–∏
                    self.load_progress()  # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –æ—Ü–µ–Ω–∫–∏
                except:
                    pass  # –ï—Å–ª–∏ –º–µ—Ç–æ–¥—ã –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

                success_message = f"–ü—Ä–µ–¥–º–µ—Ç '{subject_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"
                if grades_count > 0 or progress_count > 0:
                    success_message += "\n\n–ë—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã:"
                    if grades_count > 0:
                        success_message += f"\n‚Ä¢ {grades_count} –æ—Ü–µ–Ω–æ–∫"
                    if progress_count > 0:
                        success_message += f"\n‚Ä¢ {progress_count} –∏—Ç–æ–≥–æ–≤—ã—Ö –æ—Ü–µ–Ω–æ–∫"

                QMessageBox.information(self, "–£—Å–ø–µ—Ö", success_message)

            except Exception as e:
                # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                self.db.conn.rollback()
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç:\n{str(e)}")


    def load_subjects(self):
        search_text = self.subject_search.text()
        query = """
                SELECT s.subject_id, \
                       s.subject_name,
                       CONCAT(t.last_name, ' ', t.first_name, ' ', COALESCE(t.middle_name, '')) as teacher_name,
                       s.weekly_hours
                FROM subjects s
                         LEFT JOIN teachers t ON s.teacher_id = t.teacher_id
                WHERE s.subject_name ILIKE %s
                ORDER BY s.subject_name \
                """
        search_param = f"%{search_text}%"
        data = self.db.execute(query, (search_param,))

        self.subjects_table.setRowCount(len(data))
        for row_idx, row in enumerate(data):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º subject_id –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏
            for col_idx in range(1, len(row)):
                value = row[col_idx]
                item = QTableWidgetItem(str(value) if value else "")
                item.setData(Qt.UserRole, row[0])  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID
                self.subjects_table.setItem(row_idx, col_idx - 1, item)

    def add_subject(self):
        dialog = SubjectDialog(self.db)
        if dialog.exec_() == QDialog.Accepted:
            self.load_subjects()

    def edit_subject(self):
        current_row = self.subjects_table.currentRow()
        if current_row < 0:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return

        subject_id = self.subjects_table.item(current_row, 0).data(Qt.UserRole)
        dialog = SubjectDialog(self.db, subject_id)
        if dialog.exec_() == QDialog.Accepted:
            self.load_subjects()

    def init_lessons_tab(self):
        tab = QWidget()
        layout = QVBoxLayout()

        # –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã
        filter_layout = QHBoxLayout()

        self.lesson_search = QLineEdit()
        self.lesson_search.setPlaceholderText("–ü–æ–∏—Å–∫ —É—Ä–æ–∫–æ–≤...")
        self.lesson_search.textChanged.connect(self.load_lessons)

        self.lesson_class_filter = QComboBox()
        self.load_classes_for_lessons()
        self.lesson_class_filter.currentIndexChanged.connect(self.load_lessons)

        self.lesson_day_filter = QComboBox()
        self.lesson_day_filter.addItem("–í—Å–µ –¥–Ω–∏", None)
        self.lesson_day_filter.addItems([
            "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞"
        ])
        self.lesson_day_filter.currentIndexChanged.connect(self.load_lessons)

        filter_layout.addWidget(QLabel("–ü–æ–∏—Å–∫:"))
        filter_layout.addWidget(self.lesson_search)
        filter_layout.addWidget(QLabel("–ö–ª–∞—Å—Å:"))
        filter_layout.addWidget(self.lesson_class_filter)
        filter_layout.addWidget(QLabel("–î–µ–Ω—å:"))
        filter_layout.addWidget(self.lesson_day_filter)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        btn_layout = QHBoxLayout()
        self.btn_add_lesson = QPushButton("–î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫")
        self.btn_edit_lesson = QPushButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
        self.btn_delete_lesson = QPushButton("–£–¥–∞–ª–∏—Ç—å")

        btn_layout.addWidget(self.btn_add_lesson)
        btn_layout.addWidget(self.btn_edit_lesson)
        btn_layout.addWidget(self.btn_delete_lesson)
        btn_layout.addStretch()

        # –¢–∞–±–ª–∏—Ü–∞
        self.lessons_table = QTableWidget()
        self.lessons_table.setColumnCount(6)
        self.lessons_table.setHorizontalHeaderLabels([
            "–ö–ª–∞—Å—Å", "–ü—Ä–µ–¥–º–µ—Ç", "–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏", "–í—Ä–µ–º—è", "–ö–∞–±–∏–Ω–µ—Ç", "–£—á–∏—Ç–µ–ª—å"
        ])
        self.lessons_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)

        layout.addLayout(filter_layout)
        layout.addLayout(btn_layout)
        layout.addWidget(self.lessons_table)
        tab.setLayout(layout)

        self.tabs.addTab(tab, "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        self.btn_add_lesson.clicked.connect(self.add_lesson)
        self.btn_edit_lesson.clicked.connect(self.edit_lesson)
        self.btn_delete_lesson.clicked.connect(self.delete_lesson)

        self.load_lessons()

    def load_classes_for_lessons(self):
        self.lesson_class_filter.clear()
        self.lesson_class_filter.addItem("–í—Å–µ –∫–ª–∞—Å—Å—ã", None)

        classes = self.db.execute("""
                                  SELECT class_id, class_number
                                  FROM classes
                                  ORDER BY class_number
                                  """)

        for class_id, class_number in classes:
            self.lesson_class_filter.addItem(class_number, class_id)

    def load_lessons(self):
        search_text = self.lesson_search.text()
        class_id = self.lesson_class_filter.currentData()
        day_of_week = self.lesson_day_filter.currentText()

        query = """
                SELECT l.lesson_id,
                       c.class_number,
                       s.subject_name,
                       l.day_of_week,
                       l.lesson_time,
                       l.classroom,
                       CONCAT(t.last_name, ' ', t.first_name, ' ', COALESCE(t.middle_name, '')) as teacher_name
                FROM lessons l
                         JOIN classes c ON l.class_id = c.class_id
                         JOIN subjects s ON l.subject_id = s.subject_id
                         JOIN teachers t ON l.teacher_id = t.teacher_id
                WHERE 1 = 1 \
                """
        params = []

        if search_text:
            query += """ AND (
                c.class_number ILIKE %s OR
                s.subject_name ILIKE %s OR
                l.day_of_week ILIKE %s OR
                CONCAT(t.last_name, ' ', t.first_name, ' ', COALESCE(t.middle_name, '')) ILIKE %s OR
                l.classroom::text ILIKE %s
            )"""
            search_param = f"%{search_text}%"
            params.extend([search_param] * 5)

        if class_id:
            query += " AND l.class_id = %s"
            params.append(class_id)

        if day_of_week and day_of_week != "–í—Å–µ –¥–Ω–∏":
            query += " AND l.day_of_week = %s"
            params.append(day_of_week)

        query += """ ORDER BY 
            c.class_number,
            CASE l.day_of_week 
                WHEN '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫' THEN 1
                WHEN '–í—Ç–æ—Ä–Ω–∏–∫' THEN 2
                WHEN '–°—Ä–µ–¥–∞' THEN 3
                WHEN '–ß–µ—Ç–≤–µ—Ä–≥' THEN 4
                WHEN '–ü—è—Ç–Ω–∏—Ü–∞' THEN 5
                WHEN '–°—É–±–±–æ—Ç–∞' THEN 6
            END,
            l.lesson_time
        """

        data = self.db.execute(query, params)

        self.lessons_table.setRowCount(len(data))
        for row_idx, row in enumerate(data):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º lesson_id –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏
            for col_idx in range(1, len(row)):
                value = row[col_idx]
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
                if col_idx == 4 and value:  # lesson_time
                    if hasattr(value, 'strftime'):
                        value = value.strftime("%H:%M")
                    else:
                        value = str(value)
                item = QTableWidgetItem(str(value) if value else "")
                item.setData(Qt.UserRole, row[0])  # –°–æ—Ö—Ä–∞–Ω—è–µ–º lesson_id
                self.lessons_table.setItem(row_idx, col_idx - 1, item)

    def add_lesson(self):
        dialog = LessonDialog(self.db)
        if dialog.exec_() == QDialog.Accepted:
            self.load_lessons()

    def edit_lesson(self):
        current_row = self.lessons_table.currentRow()
        if current_row < 0:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return

        lesson_id = self.lessons_table.item(current_row, 0).data(Qt.UserRole)
        dialog = LessonDialog(self.db, lesson_id)
        if dialog.exec_() == QDialog.Accepted:
            self.load_lessons()

    def delete_lesson(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–∫–∞"""
        current_row = self.lessons_table.currentRow()
        if current_row < 0:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        lesson_id = self.lessons_table.item(current_row, 0).data(Qt.UserRole)

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–∫–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        lesson_info = self.db.execute("""
                                      SELECT c.class_number,
                                             s.subject_name,
                                             l.day_of_week,
                                             l.lesson_time,
                                             l.classroom,
                                             CONCAT(t.last_name, ' ', t.first_name, ' ',
                                                    COALESCE(t.middle_name, '')) as teacher_name
                                      FROM lessons l
                                               JOIN classes c ON l.class_id = c.class_id
                                               JOIN subjects s ON l.subject_id = s.subject_id
                                               JOIN teachers t ON l.teacher_id = t.teacher_id
                                      WHERE l.lesson_id = %s
                                      """, (lesson_id,))

        if not lesson_info:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        class_number, subject_name, day_of_week, lesson_time, classroom, teacher_name = lesson_info[0]

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if hasattr(lesson_time, 'strftime'):
            time_str = lesson_time.strftime("%H:%M")
        else:
            time_str = str(lesson_time)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        warning_message = f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —É—Ä–æ–∫?"
        warning_message += f"\n\nüìö –î–µ—Ç–∞–ª–∏ —É—Ä–æ–∫–∞:"
        warning_message += f"\n   ‚Ä¢ –ö–ª–∞—Å—Å: {class_number}"
        warning_message += f"\n   ‚Ä¢ –ü—Ä–µ–¥–º–µ—Ç: {subject_name}"
        warning_message += f"\n   ‚Ä¢ –î–µ–Ω—å: {day_of_week}"
        warning_message += f"\n   ‚Ä¢ –í—Ä–µ–º—è: {time_str}"
        warning_message += f"\n   ‚Ä¢ –ö–∞–±–∏–Ω–µ—Ç: {classroom or '–ù–µ —É–∫–∞–∑–∞–Ω'}"
        warning_message += f"\n   ‚Ä¢ –£—á–∏—Ç–µ–ª—å: {teacher_name}"

        warning_message += "\n\n‚ö†Ô∏è  –£–¥–∞–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞ –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–≤–ª–∏—è–µ—Ç –Ω–∞:"
        warning_message += "\n   ‚Ä¢ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞"
        warning_message += "\n   ‚Ä¢ –ù–∞–≥—Ä—É–∑–∫—É —É—á–∏—Ç–µ–ª—è"
        warning_message += "\n   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–∞–±–∏–Ω–µ—Ç–∞"

        warning_message += "\n\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ?"

        reply = QMessageBox.question(
            self,
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è",
            warning_message,
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "–ù–µ—Ç"
        )

        if reply == QMessageBox.Yes:
            try:
                # –£–¥–∞–ª—è–µ–º —É—Ä–æ–∫
                self.db.execute(
                    "DELETE FROM lessons WHERE lesson_id = %s",
                    (lesson_id,),
                    fetch=False
                )

                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
                self.load_lessons()

                success_message = f"–£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"
                success_message += f"\n\n–£–¥–∞–ª–µ–Ω–Ω—ã–π —É—Ä–æ–∫:"
                success_message += f"\n‚Ä¢ {subject_name} ({class_number})"
                success_message += f"\n‚Ä¢ {day_of_week} –≤ {time_str}"
                success_message += f"\n‚Ä¢ –£—á–∏—Ç–µ–ª—å: {teacher_name}"

                QMessageBox.information(self, "–£—Å–ø–µ—Ö", success_message)

            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —É—Ä–æ–∫:\n{str(e)}")


    def init_grades_tab(self):
        tab = QWidget()
        layout = QVBoxLayout()

        # –§–∏–ª—å—Ç—Ä—ã
        filter_layout = QVBoxLayout()

        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ - –æ–±—â–∏–π –ø–æ–∏—Å–∫
        search_layout = QHBoxLayout()
        self.grade_search = QLineEdit()
        self.grade_search.setPlaceholderText("–ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º (—É—á–µ–Ω–∏–∫, –ø—Ä–µ–¥–º–µ—Ç, –æ—Ü–µ–Ω–∫–∞, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π)...")
        self.grade_search.textChanged.connect(self.load_grades)
        search_layout.addWidget(QLabel("–ü–æ–∏—Å–∫:"))
        search_layout.addWidget(self.grade_search)

        # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ - —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        specific_filters_layout = QHBoxLayout()

        # –§–∏–ª—å—Ç—Ä –ø–æ —É—á–µ–Ω–∏–∫—É
        self.grade_student_filter = QComboBox()
        self.load_students_for_grades()
        self.grade_student_filter.currentIndexChanged.connect(self.load_grades)

        # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ
        self.grade_date_filter = QComboBox()
        self.load_dates_for_grades()
        self.grade_date_filter.currentIndexChanged.connect(self.load_grades)

        # –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É
        self.grade_subject_filter = QComboBox()
        self.load_subjects_for_grades()
        self.grade_subject_filter.currentIndexChanged.connect(self.load_grades)

        specific_filters_layout.addWidget(QLabel("–£—á–µ–Ω–∏–∫:"))
        specific_filters_layout.addWidget(self.grade_student_filter)
        specific_filters_layout.addWidget(QLabel("–î–∞—Ç–∞:"))
        specific_filters_layout.addWidget(self.grade_date_filter)
        specific_filters_layout.addWidget(QLabel("–ü—Ä–µ–¥–º–µ—Ç:"))
        specific_filters_layout.addWidget(self.grade_subject_filter)

        # –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        self.btn_reset_filters = QPushButton("–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã")
        self.btn_reset_filters.clicked.connect(self.reset_grade_filters)
        specific_filters_layout.addWidget(self.btn_reset_filters)

        filter_layout.addLayout(search_layout)
        filter_layout.addLayout(specific_filters_layout)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        btn_layout = QHBoxLayout()
        self.btn_add_grade = QPushButton("–î–æ–±–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É")
        self.btn_edit_grade = QPushButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
        self.btn_delete_grade = QPushButton("–£–¥–∞–ª–∏—Ç—å")

        btn_layout.addWidget(self.btn_add_grade)
        btn_layout.addWidget(self.btn_edit_grade)
        btn_layout.addWidget(self.btn_delete_grade)
        btn_layout.addStretch()

        # –¢–∞–±–ª–∏—Ü–∞
        self.grades_table = QTableWidget()
        self.grades_table.setColumnCount(6)
        self.grades_table.setHorizontalHeaderLabels([
            "–£—á–µ–Ω–∏–∫", "–ü—Ä–µ–¥–º–µ—Ç", "–û—Ü–µ–Ω–∫–∞", "–î–∞—Ç–∞", "–¢–∏–ø", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
        ])
        self.grades_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)

        layout.addLayout(filter_layout)
        layout.addLayout(btn_layout)
        layout.addWidget(self.grades_table)
        tab.setLayout(layout)

        self.tabs.addTab(tab, "–û—Ü–µ–Ω–∫–∏")

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        self.btn_add_grade.clicked.connect(self.add_grade)
        self.btn_edit_grade.clicked.connect(self.edit_grade)
        self.btn_delete_grade.clicked.connect(self.delete_grade)

        self.load_grades()

    def load_students_for_grades(self):
        self.grade_student_filter.clear()
        self.grade_student_filter.addItem("–í—Å–µ —É—á–µ–Ω–∏–∫–∏", None)

        students = self.db.execute("""
                                   SELECT student_id,
                                          CONCAT(last_name, ' ', first_name, ' ', COALESCE(middle_name, '')) as full_name
                                   FROM students
                                   ORDER BY last_name, first_name
                                   """)

        for student_id, full_name in students:
            self.grade_student_filter.addItem(full_name, student_id)

    def load_subjects_for_grades(self):
        self.grade_subject_filter.clear()
        self.grade_subject_filter.addItem("–í—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã", None)

        subjects = self.db.execute("SELECT subject_id, subject_name FROM subjects ORDER BY subject_name")

        for subject_id, subject_name in subjects:
            self.grade_subject_filter.addItem(subject_name, subject_id)

    def load_dates_for_grades(self):
        self.grade_date_filter.clear()
        self.grade_date_filter.addItem("–í—Å–µ –¥–∞—Ç—ã", None)

        # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–µ—Å—è—Ü—ã –∏ –≥–æ–¥—ã –∏–∑ –æ—Ü–µ–Ω–æ–∫
        dates = self.db.execute("""
                                SELECT DISTINCT TO_CHAR(grade_date, 'YYYY-MM')  as year_month,
                                                TO_CHAR(grade_date, 'Mon YYYY') as display_date
                                FROM grades
                                ORDER BY year_month DESC
                                """)

        for year_month, display_date in dates:
            self.grade_date_filter.addItem(display_date, year_month)

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–∏–æ–¥–æ–≤
        self.grade_date_filter.addItem("‚îÄ" * 20, "separator1")  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        self.grade_date_filter.addItem("–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π", "last_30_days")
        self.grade_date_filter.addItem("–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", "current_month")
        self.grade_date_filter.addItem("–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü", "last_month")
        self.grade_date_filter.addItem("–¢–µ–∫—É—â–∏–π —É—á–µ–±–Ω—ã–π –≥–æ–¥", "current_year")

    def reset_grade_filters(self):
        """–°–±—Ä–æ—Å –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        self.grade_search.clear()
        self.grade_student_filter.setCurrentIndex(0)
        self.grade_date_filter.setCurrentIndex(0)
        self.grade_subject_filter.setCurrentIndex(0)
        self.load_grades()

    def load_grades(self):
        search_text = self.grade_search.text()
        student_id = self.grade_student_filter.currentData()
        subject_id = self.grade_subject_filter.currentData()
        date_filter = self.grade_date_filter.currentData()

        query = """
                SELECT g.grade_id,
                       CONCAT(s.last_name, ' ', s.first_name, ' ', COALESCE(s.middle_name, '')) as student_name,
                       sub.subject_name,
                       g.grade,
                       g.grade_date,
                       g.grade_type,
                       g.comment
                FROM grades g
                         JOIN students s ON g.student_id = s.student_id
                         JOIN subjects sub ON g.subject_id = sub.subject_id
                WHERE 1 = 1 \
                """
        params = []

        # –û–±—â–∏–π –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–º –ø–æ–ª—è–º
        if search_text:
            query += """ AND (
                CONCAT(s.last_name, ' ', s.first_name, ' ', COALESCE(s.middle_name, '')) ILIKE %s OR
                sub.subject_name ILIKE %s OR
                g.grade::text ILIKE %s OR
                g.grade_type ILIKE %s OR
                g.comment ILIKE %s OR
                TO_CHAR(g.grade_date, 'DD.MM.YYYY') ILIKE %s
            )"""
            search_param = f"%{search_text}%"
            params.extend([search_param] * 6)

        # –§–∏–ª—å—Ç—Ä –ø–æ —É—á–µ–Ω–∏–∫—É
        if student_id:
            query += " AND g.student_id = %s"
            params.append(student_id)

        # –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É
        if subject_id:
            query += " AND g.subject_id = %s"
            params.append(subject_id)

        # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ
        if date_filter and date_filter not in ["separator1"]:
            if date_filter == "last_30_days":
                query += " AND g.grade_date >= CURRENT_DATE - INTERVAL '30 days'"
            elif date_filter == "current_month":
                query += " AND EXTRACT(YEAR FROM g.grade_date) = EXTRACT(YEAR FROM CURRENT_DATE) AND EXTRACT(MONTH FROM g.grade_date) = EXTRACT(MONTH FROM CURRENT_DATE)"
            elif date_filter == "last_month":
                query += """ AND g.grade_date >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') 
                            AND g.grade_date < DATE_TRUNC('month', CURRENT_DATE)"""
            elif date_filter == "current_year":
                query += """ AND g.grade_date >= CASE 
                                WHEN EXTRACT(MONTH FROM CURRENT_DATE) >= 9 
                                THEN DATE_TRUNC('year', CURRENT_DATE) + INTERVAL '8 months'
                                ELSE DATE_TRUNC('year', CURRENT_DATE) - INTERVAL '4 months'
                            END
                            AND g.grade_date <= CASE 
                                WHEN EXTRACT(MONTH FROM CURRENT_DATE) >= 9 
                                THEN DATE_TRUNC('year', CURRENT_DATE) + INTERVAL '1 year' + INTERVAL '4 months'
                                ELSE DATE_TRUNC('year', CURRENT_DATE) + INTERVAL '4 months'
                            END"""
            elif len(date_filter) == 7 and '-' in date_filter:  # –§–æ—Ä–º–∞—Ç YYYY-MM
                year, month = date_filter.split('-')
                query += " AND EXTRACT(YEAR FROM g.grade_date) = %s AND EXTRACT(MONTH FROM g.grade_date) = %s"
                params.extend([int(year), int(month)])

        query += " ORDER BY g.grade_date DESC, s.last_name, s.first_name"

        try:
            data = self.db.execute(query, params)
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ü–µ–Ω–æ–∫:\n{str(e)}")
            data = []

        self.grades_table.setRowCount(len(data))
        for row_idx, row in enumerate(data):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º grade_id –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏
            for col_idx in range(1, len(row)):
                value = row[col_idx]
                if col_idx == 4 and value:  # –î–∞—Ç–∞
                    value = value.strftime("%d.%m.%Y")
                item = QTableWidgetItem(str(value) if value else "")
                item.setData(Qt.UserRole, row[0])  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID
                self.grades_table.setItem(row_idx, col_idx - 1, item)



    def add_grade(self):
        dialog = GradeDialog(self.db)
        if dialog.exec_() == QDialog.Accepted:
            self.load_grades()

    def edit_grade(self):
        current_row = self.grades_table.currentRow()
        if current_row < 0:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return

        grade_id = self.grades_table.item(current_row, 0).data(Qt.UserRole)
        dialog = GradeDialog(self.db, grade_id)
        if dialog.exec_() == QDialog.Accepted:
            self.load_grades()

    def delete_grade(self):
        current_row = self.grades_table.currentRow()
        if current_row < 0:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        grade_id = self.grades_table.item(current_row, 0).data(Qt.UserRole)

        reply = QMessageBox.question(self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                                     "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –æ—Ü–µ–Ω–∫—É?",
                                     QMessageBox.Yes | QMessageBox.No)
        if reply == QMessageBox.Yes:
            try:
                self.db.execute("DELETE FROM grades WHERE grade_id = %s", (grade_id,), fetch=False)
                self.load_grades()
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–û—Ü–µ–Ω–∫–∞ —É–¥–∞–ª–µ–Ω–∞")
            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ—Ü–µ–Ω–∫—É:\n{str(e)}")




    def init_progress_tab(self):
        tab = QWidget()
        layout = QVBoxLayout()

        # –§–∏–ª—å—Ç—Ä—ã
        filter_layout = QVBoxLayout()

        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –æ–±—â–∏–π –ø–æ–∏—Å–∫
        search_layout = QHBoxLayout()
        self.progress_search = QLineEdit()
        self.progress_search.setPlaceholderText("–ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º (—É—á–µ–Ω–∏–∫, –ø—Ä–µ–¥–º–µ—Ç, –ø–µ—Ä–∏–æ–¥, –≥–æ–¥, –æ—Ü–µ–Ω–∫–∞)...")
        self.progress_search.textChanged.connect(self.load_progress)
        search_layout.addWidget(QLabel("–ü–æ–∏—Å–∫:"))
        search_layout.addWidget(self.progress_search)

        # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ - —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        specific_filters_layout = QHBoxLayout()

        # –§–∏–ª—å—Ç—Ä –ø–æ —É—á–µ–Ω–∏–∫—É
        self.progress_student_filter = QComboBox()
        self.load_students_for_progress()
        self.progress_student_filter.currentIndexChanged.connect(self.load_progress)

        # –§–∏–ª—å—Ç—Ä –ø–æ –ø–µ—Ä–∏–æ–¥—É
        self.progress_period_filter = QComboBox()
        self.progress_period_filter.addItem("–í—Å–µ –ø–µ—Ä–∏–æ–¥—ã", None)
        self.progress_period_filter.addItem("—á–µ—Ç–≤–µ—Ä—Ç—å", "—á–µ—Ç–≤–µ—Ä—Ç—å")
        self.progress_period_filter.addItem("–ø–æ–ª—É–≥–æ–¥–∏–µ", "–ø–æ–ª—É–≥–æ–¥–∏–µ")
        self.progress_period_filter.addItem("–≥–æ–¥", "–≥–æ–¥")
        self.progress_period_filter.currentIndexChanged.connect(self.load_progress)

        # –§–∏–ª—å—Ç—Ä –ø–æ —É—á–µ–±–Ω–æ–º—É –≥–æ–¥—É
        self.progress_year_filter = QComboBox()
        self.load_years_for_progress()
        self.progress_year_filter.currentIndexChanged.connect(self.load_progress)

        # –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É
        self.progress_subject_filter = QComboBox()
        self.load_subjects_for_progress()
        self.progress_subject_filter.currentIndexChanged.connect(self.load_progress)

        specific_filters_layout.addWidget(QLabel("–£—á–µ–Ω–∏–∫:"))
        specific_filters_layout.addWidget(self.progress_student_filter)
        specific_filters_layout.addWidget(QLabel("–ü–µ—Ä–∏–æ–¥:"))
        specific_filters_layout.addWidget(self.progress_period_filter)
        specific_filters_layout.addWidget(QLabel("–£—á–µ–±–Ω—ã–π –≥–æ–¥:"))
        specific_filters_layout.addWidget(self.progress_year_filter)
        specific_filters_layout.addWidget(QLabel("–ü—Ä–µ–¥–º–µ—Ç:"))
        specific_filters_layout.addWidget(self.progress_subject_filter)

        # –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        self.btn_reset_progress_filters = QPushButton("–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã")
        self.btn_reset_progress_filters.clicked.connect(self.reset_progress_filters)
        specific_filters_layout.addWidget(self.btn_reset_progress_filters)

        filter_layout.addLayout(search_layout)
        filter_layout.addLayout(specific_filters_layout)

        # –¢–∞–±–ª–∏—Ü–∞
        self.progress_table = QTableWidget()
        self.progress_table.setColumnCount(7)
        self.progress_table.setHorizontalHeaderLabels([
            "–£—á–µ–Ω–∏–∫", "–ü—Ä–µ–¥–º–µ—Ç", "–ü–µ—Ä–∏–æ–¥", "–ù–æ–º–µ—Ä –ø–µ—Ä–∏–æ–¥–∞", "–£—á–µ–±–Ω—ã–π –≥–æ–¥", "–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª", "–ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞"
        ])
        self.progress_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)

        layout.addLayout(filter_layout)
        layout.addWidget(self.progress_table)
        tab.setLayout(layout)

        self.tabs.addTab(tab, "–ò—Ç–æ–≥–æ–≤—ã–µ –æ—Ü–µ–Ω–∫–∏")

        self.load_progress()

    def load_students_for_progress(self):
        self.progress_student_filter.clear()
        self.progress_student_filter.addItem("–í—Å–µ —É—á–µ–Ω–∏–∫–∏", None)

        students = self.db.execute("""
                                   SELECT student_id,
                                          CONCAT(last_name, ' ', first_name, ' ', COALESCE(middle_name, '')) as full_name
                                   FROM students
                                   ORDER BY last_name, first_name
                                   """)

        for student_id, full_name in students:
            self.progress_student_filter.addItem(full_name, student_id)

    def load_subjects_for_progress(self):
        self.progress_subject_filter.clear()
        self.progress_subject_filter.addItem("–í—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã", None)

        subjects = self.db.execute("""
                                   SELECT DISTINCT s.subject_id, s.subject_name
                                   FROM subjects s
                                            JOIN student_progress sp ON s.subject_id = sp.subject_id
                                   ORDER BY s.subject_name
                                   """)

        for subject_id, subject_name in subjects:
            self.progress_subject_filter.addItem(subject_name, subject_id)

    def load_years_for_progress(self):
        self.progress_year_filter.clear()
        self.progress_year_filter.addItem("–í—Å–µ –≥–æ–¥—ã", None)

        years = self.db.execute("""
                                SELECT DISTINCT academic_year
                                FROM student_progress
                                ORDER BY academic_year DESC
                                """)

        for year_tuple in years:
            year = year_tuple[0]
            if year:
                self.progress_year_filter.addItem(year, year)

    def reset_progress_filters(self):
        """–°–±—Ä–æ—Å –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        self.progress_search.clear()
        self.progress_student_filter.setCurrentIndex(0)
        self.progress_period_filter.setCurrentIndex(0)
        self.progress_year_filter.setCurrentIndex(0)
        self.progress_subject_filter.setCurrentIndex(0)
        self.load_progress()

    def load_progress(self):
        search_text = self.progress_search.text()
        student_id = self.progress_student_filter.currentData()
        period_type = self.progress_period_filter.currentData()
        academic_year = self.progress_year_filter.currentData()
        subject_id = self.progress_subject_filter.currentData()

        query = """
                SELECT sp.progress_id,
                       CONCAT(s.last_name, ' ', s.first_name, ' ', COALESCE(s.middle_name, '')) as student_name,
                       sub.subject_name,
                       sp.period_type,
                       sp.period_number,
                       sp.academic_year,
                       sp.average_grade,
                       sp.final_grade
                FROM student_progress sp
                         JOIN students s ON sp.student_id = s.student_id
                         JOIN subjects sub ON sp.subject_id = sub.subject_id
                WHERE 1 = 1 \
                """
        params = []

        # –û–±—â–∏–π –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–º –ø–æ–ª—è–º
        if search_text:
            query += """ AND (
                CONCAT(s.last_name, ' ', s.first_name, ' ', COALESCE(s.middle_name, '')) ILIKE %s OR
                sub.subject_name ILIKE %s OR
                sp.period_type ILIKE %s OR
                sp.period_number::text ILIKE %s OR
                sp.academic_year ILIKE %s OR
                sp.average_grade::text ILIKE %s OR
                sp.final_grade::text ILIKE %s
            )"""
            search_param = f"%{search_text}%"
            params.extend([search_param] * 7)

        # –§–∏–ª—å—Ç—Ä –ø–æ —É—á–µ–Ω–∏–∫—É
        if student_id:
            query += " AND sp.student_id = %s"
            params.append(student_id)

        # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –ø–µ—Ä–∏–æ–¥–∞
        if period_type:
            query += " AND sp.period_type = %s"
            params.append(period_type)

        # –§–∏–ª—å—Ç—Ä –ø–æ —É—á–µ–±–Ω–æ–º—É –≥–æ–¥—É
        if academic_year:
            query += " AND sp.academic_year = %s"
            params.append(academic_year)

        # –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É
        if subject_id:
            query += " AND sp.subject_id = %s"
            params.append(subject_id)

        query += """ ORDER BY 
            s.last_name, 
            s.first_name, 
            sp.academic_year DESC, 
            CASE sp.period_type 
                WHEN '–≥–æ–¥' THEN 1
                WHEN '–ø–æ–ª—É–≥–æ–¥–∏–µ' THEN 2 
                WHEN '—á–µ—Ç–≤–µ—Ä—Ç—å' THEN 3
            END,
            sp.period_number,
            sub.subject_name
        """

        try:
            data = self.db.execute(query, params)
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Ç–æ–≥–æ–≤—ã—Ö –æ—Ü–µ–Ω–æ–∫:\n{str(e)}")
            data = []

        self.progress_table.setRowCount(len(data))
        for row_idx, row in enumerate(data):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º progress_id –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏
            for col_idx in range(1, len(row)):
                value = row[col_idx]
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –ø–µ—Ä–∏–æ–¥–∞
                if col_idx == 4 and value is None:
                    value = "‚Äî"
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª
                elif col_idx == 6 and value is not None:
                    value = f"{value:.2f}"

                item = QTableWidgetItem(str(value) if value is not None else "")
                item.setData(Qt.UserRole, row[0])  # –°–æ—Ö—Ä–∞–Ω—è–µ–º progress_id
                self.progress_table.setItem(row_idx, col_idx - 1, item)





    def init_reports_tab(self):
        tab = QWidget()
        layout = QVBoxLayout()

        # –ö–Ω–æ–ø–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ –≤ —Ç—Ä–∏ —Ä—è–¥–∞
        reports_layout = QVBoxLayout()

        # –ü–ï–†–í–´–ô —Ä—è–¥ –∫–Ω–æ–ø–æ–∫ - –î–ï–¢–ê–õ–¨–ù–´–ï –û–¢–ß–ï–¢–´
        row1_layout = QHBoxLayout()
        self.btn_students_report = QPushButton("üìö –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ–± —É—á–µ–Ω–∏–∫–∞—Ö")
        self.btn_teachers_report = QPushButton("üë®‚Äçüè´ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ–± —É—á–∏—Ç–µ–ª—è—Ö")
        self.btn_subjects_report = QPushButton("üìñ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ –ø—Ä–µ–¥–º–µ—Ç–∞—Ö")

        # –£–º–µ–Ω—å—à–∞–µ–º –≤—ã—Å–æ—Ç—É –∫–Ω–æ–ø–æ–∫
        for btn in [self.btn_students_report, self.btn_teachers_report, self.btn_subjects_report]:
            btn.setMaximumHeight(35)

        row1_layout.addWidget(self.btn_students_report)
        row1_layout.addWidget(self.btn_teachers_report)
        row1_layout.addWidget(self.btn_subjects_report)

        # –í–¢–û–†–û–ô —Ä—è–¥ –∫–Ω–æ–ø–æ–∫ - –†–ê–°–ü–ò–°–ê–ù–ò–ï –ò –£–°–ü–ï–í–ê–ï–ú–û–°–¢–¨
        row2_layout = QHBoxLayout()
        self.btn_schedule_report = QPushButton("üïê –û—Ç—á–µ—Ç –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏")
        self.btn_student_progress_new = QPushButton("üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ–± —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏")
        self.btn_detailed_schedule_report = QPushButton("üìã –î–µ—Ç–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞")

        for btn in [self.btn_schedule_report, self.btn_student_progress_new, self.btn_detailed_schedule_report]:
            btn.setMaximumHeight(35)

        row2_layout.addWidget(self.btn_schedule_report)
        row2_layout.addWidget(self.btn_student_progress_new)
        row2_layout.addWidget(self.btn_detailed_schedule_report)

        # –¢–†–ï–¢–ò–ô —Ä—è–¥ –∫–Ω–æ–ø–æ–∫ - –ë–ê–ó–û–í–´–ï –û–¢–ß–ï–¢–´
        row3_layout = QHBoxLayout()
        self.btn_simple_student_progress = QPushButton("üìà –ë–∞–∑–æ–≤—ã–π –æ—Ç—á–µ—Ç —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏")
        self.btn_simple_class_summary = QPushButton("üè´ –ë–∞–∑–æ–≤–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –∫–ª–∞—Å—Å–∞–º")
        self.btn_simple_teacher_workload = QPushButton("‚öñÔ∏è –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ —É—á–∏—Ç–µ–ª–µ–π")

        # –î–µ–ª–∞–µ–º –±–∞–∑–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã –Ω–µ–º–Ω–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ —Ü–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–ª–∏—á–∏—è
        base_style = """
            QPushButton {
                background-color: #A0845C;
                color: #FFFFFF;
                border: 1px solid #5E3023;
                border-radius: 4px;
                padding: 8px 16px;
                font-weight: bold;
                min-width: 80px;
                max-height: 35px;
            }
            QPushButton:hover {
                background-color: #C8A882;
            }
            QPushButton:pressed {
                background-color: #5E3023;
            }
        """

        for btn in [self.btn_simple_student_progress, self.btn_simple_class_summary, self.btn_simple_teacher_workload]:
            btn.setMaximumHeight(35)
            btn.setStyleSheet(base_style)

        row3_layout.addWidget(self.btn_simple_student_progress)
        row3_layout.addWidget(self.btn_simple_class_summary)
        row3_layout.addWidget(self.btn_simple_teacher_workload)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ä—è–¥—ã –≤ layout
        reports_layout.addLayout(row1_layout)
        reports_layout.addLayout(row2_layout)
        reports_layout.addLayout(row3_layout)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω—É—é –ª–∏–Ω–∏—é
        separator_label = QLabel("‚îÅ" * 100)
        separator_label.setStyleSheet("color: #895737; font-weight: bold;")
        separator_label.setAlignment(Qt.AlignCenter)
        reports_layout.addWidget(separator_label)

        # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤
        self.report_area = QScrollArea()
        self.report_area.setWidgetResizable(True)
        self.report_area.setMinimumHeight(500)

        self.report_content = QLabel("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
        self.report_content.setAlignment(Qt.AlignTop)
        self.report_content.setWordWrap(True)
        self.report_content.setStyleSheet("""
            background-color: white; 
            padding: 20px; 
            border: 1px solid #C08552;
            font-size: 13px;
            line-height: 1.4;
        """)
        self.report_area.setWidget(self.report_content)

        # –ò–∑–º–µ–Ω—è–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏: –∫–Ω–æ–ø–∫–∏ –∑–∞–Ω–∏–º–∞—é—Ç –º–∏–Ω–∏–º—É–º –º–µ—Å—Ç–∞, –æ—Ç—á–µ—Ç—ã - –º–∞–∫—Å–∏–º—É–º
        layout.addLayout(reports_layout, 0)  # 0 = –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Ç—è–∂–µ–Ω–∏–µ
        layout.addWidget(self.report_area, 1)  # 1 = –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Ç—è–∂–µ–Ω–∏–µ

        tab.setLayout(layout)
        self.tabs.addTab(tab, "–û—Ç—á–µ—Ç—ã")

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –î–ï–¢–ê–õ–¨–ù–´–• –æ—Ç—á–µ—Ç–æ–≤
        self.btn_students_report.clicked.connect(self.show_students_report)
        self.btn_teachers_report.clicked.connect(self.show_teachers_report)
        self.btn_subjects_report.clicked.connect(self.show_subjects_report)
        self.btn_schedule_report.clicked.connect(self.show_schedule_report)
        self.btn_student_progress_new.clicked.connect(self.show_student_progress_detailed_report)
        self.btn_detailed_schedule_report.clicked.connect(self.show_detailed_class_schedule_report)

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ë–ê–ó–û–í–´–• –æ—Ç—á–µ—Ç–æ–≤
        self.btn_simple_student_progress.clicked.connect(self.show_student_progress_report)
        self.btn_simple_class_summary.clicked.connect(self.show_class_summary_report)
        self.btn_simple_teacher_workload.clicked.connect(self.show_teacher_workload_report)

    # –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ë–ê–ó–û–í–´–ï –ú–ï–¢–û–î–´ –û–¢–ß–ï–¢–û–í:

    def show_student_progress_report(self):
        """–ë–∞–∑–æ–≤—ã–π –æ—Ç—á–µ—Ç –ø–æ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏ —É—á–µ–Ω–∏–∫–æ–≤"""
        try:
            query = """
                    SELECT s.last_name,
                           s.first_name,
                           c.class_number,
                           AVG(g.grade)   as avg_grade,
                           COUNT(g.grade) as total_grades
                    FROM students s
                             LEFT JOIN classes c ON s.class_id = c.class_id
                             LEFT JOIN grades g ON s.student_id = g.student_id
                    GROUP BY s.student_id, s.last_name, s.first_name, c.class_number
                    HAVING COUNT(g.grade) > 0
                    ORDER BY c.class_number, s.last_name, s.first_name
                    """
            data = self.db.execute(query)

            report_text = f"<h2>üìà –ë–∞–∑–æ–≤—ã–π –æ—Ç—á–µ—Ç –ø–æ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏ —É—á–µ–Ω–∏–∫–æ–≤</h2>"
            report_text += f"<p><strong>–î–∞—Ç–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è:</strong> {datetime.now().strftime('%d.%m.%Y %H:%M')}</p>"
            report_text += f"<p><strong>–ü–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ —É—á–µ–Ω–∏–∫–∏ —Å –æ—Ü–µ–Ω–∫–∞–º–∏</strong></p><br>"

            if not data:
                report_text += "<p><em>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</em></p>"
            else:
                report_text += "<table border='1' cellpadding='8' style='border-collapse: collapse; width: 100%;'>"
                report_text += "<tr style='background-color: #895737; color: white;'>"
                report_text += "<th>‚Ññ</th><th>–§–ò–û</th><th>–ö–ª–∞—Å—Å</th><th>–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª</th><th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫</th></tr>"

                for idx, row in enumerate(data, 1):
                    last_name, first_name, class_number, avg_grade, total_grades = row
                    full_name = f"{last_name} {first_name}"
                    avg_str = f"{avg_grade:.2f}" if avg_grade else "‚Äî"

                    # –¶–≤–µ—Ç–æ–≤–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è —Å—Ä–µ–¥–Ω–µ–≥–æ –±–∞–ª–ª–∞
                    if avg_grade and avg_grade >= 4.5:
                        avg_color = "green"
                    elif avg_grade and avg_grade >= 3.5:
                        avg_color = "orange"
                    else:
                        avg_color = "red"

                    report_text += f"<tr>"
                    report_text += f"<td style='text-align: center;'>{idx}</td>"
                    report_text += f"<td>{full_name}</td>"
                    report_text += f"<td style='text-align: center;'>{class_number or '–ë–µ–∑ –∫–ª–∞—Å—Å–∞'}</td>"
                    report_text += f"<td style='text-align: center; color: {avg_color}; font-weight: bold;'>{avg_str}</td>"
                    report_text += f"<td style='text-align: center;'>{total_grades or 0}</td>"
                    report_text += f"</tr>"

                report_text += "</table>"
                report_text += f"<p><strong>–í—Å–µ–≥–æ —É—á–µ–Ω–∏–∫–æ–≤ —Å –æ—Ü–µ–Ω–∫–∞–º–∏:</strong> {len(data)}</p>"

            self.report_content.setText(report_text)

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–∞–∑–æ–≤—ã–π –æ—Ç—á–µ—Ç –ø–æ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏:\n{str(e)}")

    def show_class_summary_report(self):
        """–ë–∞–∑–æ–≤–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –∫–ª–∞—Å—Å–∞–º"""
        try:
            query = """
                    SELECT c.class_number,
                           c.student_count,
                           CONCAT(t.last_name, ' ', t.first_name, ' ', COALESCE(t.middle_name, '')) as teacher_name,
                           COUNT(s.student_id)                                                      as actual_students
                    FROM classes c
                             LEFT JOIN teachers t ON c.homeroom_teacher_id = t.teacher_id
                             LEFT JOIN students s ON c.class_id = s.class_id
                    GROUP BY c.class_id, c.class_number, c.student_count, t.last_name, t.first_name, t.middle_name
                    ORDER BY c.class_number
                    """
            data = self.db.execute(query)

            report_text = f"<h2>üè´ –ë–∞–∑–æ–≤–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –∫–ª–∞—Å—Å–∞–º</h2>"
            report_text += f"<p><strong>–î–∞—Ç–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è:</strong> {datetime.now().strftime('%d.%m.%Y %H:%M')}</p><br>"

            if not data:
                report_text += "<p><em>–ù–µ—Ç –∫–ª–∞—Å—Å–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ</em></p>"
            else:
                report_text += "<table border='1' cellpadding='8' style='border-collapse: collapse; width: 100%;'>"
                report_text += "<tr style='background-color: #895737; color: white;'>"
                report_text += "<th>–ö–ª–∞—Å—Å</th><th>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ —É—á–µ–Ω–∏–∫–æ–≤</th><th>–§–∞–∫—Ç–∏—á–µ—Å–∫–∏ —É—á–µ–Ω–∏–∫–æ–≤</th><th>–°—Ç–∞—Ç—É—Å</th><th>–ö–ª–∞—Å—Å–Ω—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å</th></tr>"

                total_registered = 0
                total_actual = 0

                for row in data:
                    class_number, registered, teacher_name, actual = row
                    total_registered += registered or 0
                    total_actual += actual or 0

                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –∫–ª–∞—Å—Å–∞
                    if actual == 0:
                        status = "üî¥ –ü—É—Å—Ç–æ–π"
                        status_color = "red"
                    elif actual == registered:
                        status = "üü¢ –ü–æ–ª–Ω—ã–π"
                        status_color = "green"
                    elif actual < registered:
                        status = "üü° –ù–µ–¥–æ–±–æ—Ä"
                        status_color = "orange"
                    else:
                        status = "üî¥ –ü–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω"
                        status_color = "red"

                    report_text += f"<tr>"
                    report_text += f"<td style='text-align: center; font-weight: bold;'>{class_number}</td>"
                    report_text += f"<td style='text-align: center;'>{registered or 0}</td>"
                    report_text += f"<td style='text-align: center;'>{actual}</td>"
                    report_text += f"<td style='text-align: center; color: {status_color};'>{status}</td>"
                    report_text += f"<td>{teacher_name or '‚ùå –ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}</td>"
                    report_text += f"</tr>"

                report_text += "</table>"

                report_text += f"<h3>üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</h3>"
                report_text += f"<p><strong>–í—Å–µ–≥–æ –∫–ª–∞—Å—Å–æ–≤:</strong> {len(data)}</p>"
                report_text += f"<p><strong>–í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç:</strong> {total_registered}</p>"
                report_text += f"<p><strong>–§–∞–∫—Ç–∏—á–µ—Å–∫–∏ —É—á–µ–Ω–∏–∫–æ–≤:</strong> {total_actual}</p>"
                report_text += f"<p><strong>–°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç:</strong> {max(0, total_registered - total_actual)}</p>"

            self.report_content.setText(report_text)

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–∞–∑–æ–≤—É—é —Å–≤–æ–¥–∫—É –ø–æ –∫–ª–∞—Å—Å–∞–º:\n{str(e)}")

    def show_teacher_workload_report(self):
        """–ë–∞–∑–æ–≤—ã–π –æ—Ç—á–µ—Ç –Ω–∞–≥—Ä—É–∑–∫–∏ —É—á–∏—Ç–µ–ª–µ–π"""
        try:
            query = """
                    SELECT t.last_name,
                           t.first_name,
                           t.weekly_hours,
                           t.salary,
                           COUNT(DISTINCT s.subject_id) as subjects_count,
                           COUNT(DISTINCT c.class_id)   as homeroom_count
                    FROM teachers t
                             LEFT JOIN subjects s ON t.teacher_id = s.teacher_id
                             LEFT JOIN classes c ON t.teacher_id = c.homeroom_teacher_id
                    GROUP BY t.teacher_id, t.last_name, t.first_name, t.weekly_hours, t.salary
                    ORDER BY t.last_name, t.first_name
                    """
            data = self.db.execute(query)

            report_text = f"<h2>‚öñÔ∏è –ë–∞–∑–æ–≤—ã–π –æ—Ç—á–µ—Ç –Ω–∞–≥—Ä—É–∑–∫–∏ —É—á–∏—Ç–µ–ª–µ–π</h2>"
            report_text += f"<p><strong>–î–∞—Ç–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è:</strong> {datetime.now().strftime('%d.%m.%Y %H:%M')}</p><br>"

            if not data:
                report_text += "<p><em>–ù–µ—Ç —É—á–∏—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ</em></p>"
            else:
                report_text += "<table border='1' cellpadding='8' style='border-collapse: collapse; width: 100%;'>"
                report_text += "<tr style='background-color: #895737; color: white;'>"
                report_text += "<th>‚Ññ</th><th>–§–ò–û</th><th>–ù–µ–¥–µ–ª—å–Ω—ã–µ —á–∞—Å—ã</th><th>–ó–∞—Ä–ø–ª–∞—Ç–∞</th><th>–ü—Ä–µ–¥–º–µ—Ç–æ–≤</th><th>–ö–ª–∞—Å—Å–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ</th></tr>"

                total_hours = 0
                total_salary = 0

                for idx, row in enumerate(data, 1):
                    last_name, first_name, weekly_hours, salary, subjects_count, homeroom_count = row
                    full_name = f"{last_name} {first_name}"

                    if weekly_hours:
                        total_hours += weekly_hours
                    if salary:
                        total_salary += salary

                    hours_str = f"{weekly_hours} —á/–Ω–µ–¥" if weekly_hours else "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã"
                    salary_str = f"{salary:,} —Ä—É–±." if salary else "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–∞"
                    homeroom_str = "‚úÖ –î–∞" if homeroom_count > 0 else "‚ùå –ù–µ—Ç"

                    report_text += f"<tr>"
                    report_text += f"<td style='text-align: center;'>{idx}</td>"
                    report_text += f"<td>{full_name}</td>"
                    report_text += f"<td style='text-align: center;'>{hours_str}</td>"
                    report_text += f"<td style='text-align: center;'>{salary_str}</td>"
                    report_text += f"<td style='text-align: center;'>{subjects_count}</td>"
                    report_text += f"<td style='text-align: center;'>{homeroom_str}</td>"
                    report_text += f"</tr>"

                report_text += "</table>"

                report_text += f"<h3>üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</h3>"
                report_text += f"<p><strong>–í—Å–µ–≥–æ —É—á–∏—Ç–µ–ª–µ–π:</strong> {len(data)}</p>"
                report_text += f"<p><strong>–û–±—â–∞—è –Ω–µ–¥–µ–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞:</strong> {total_hours} —á–∞—Å–æ–≤</p>"
                report_text += f"<p><strong>–û–±—â–∏–π —Ñ–æ–Ω–¥ –æ–ø–ª–∞—Ç—ã —Ç—Ä—É–¥–∞:</strong> {total_salary:,} —Ä—É–±.</p>"
                report_text += f"<p><strong>–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞:</strong> {total_salary // len(data):,} —Ä—É–±.</p>" if len(
                    data) > 0 else ""

            self.report_content.setText(report_text)

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–∞–∑–æ–≤—ã–π –æ—Ç—á–µ—Ç –Ω–∞–≥—Ä—É–∑–∫–∏ —É—á–∏—Ç–µ–ª–µ–π:\n{str(e)}")



    def show_detailed_class_schedule_report(self):
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞
            dialog = QDialog(self)
            dialog.setWindowTitle("–í—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏")
            dialog.setFixedSize(350, 200)
            dialog.setStyleSheet(APP_STYLE)

            layout = QVBoxLayout()

            # –í—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞
            layout.addWidget(QLabel("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å:"))
            class_combo = QComboBox()

            classes = self.db.execute("SELECT class_id, class_number FROM classes ORDER BY class_number")
            if not classes:
                QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –∫–ª–∞—Å—Å–æ–≤")
                return

            for class_id, class_number in classes:
                class_combo.addItem(class_number, class_id)
            layout.addWidget(class_combo)

            # –ö–Ω–æ–ø–∫–∏
            btn_layout = QHBoxLayout()
            generate_btn = QPushButton("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç")
            cancel_btn = QPushButton("–û—Ç–º–µ–Ω–∞")
            btn_layout.addWidget(generate_btn)
            btn_layout.addWidget(cancel_btn)
            layout.addLayout(btn_layout)

            dialog.setLayout(layout)

            def generate_report():
                dialog.accept()

            def cancel_report():
                dialog.reject()

            generate_btn.clicked.connect(generate_report)
            cancel_btn.clicked.connect(cancel_report)

            if dialog.exec_() != QDialog.Accepted:
                return

            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å
            selected_class_id = class_combo.currentData()
            selected_class_name = class_combo.currentText()

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞—Å—Å–µ
            class_info = self.db.execute("""
                                         SELECT c.class_number,
                                                c.student_count,
                                                c.classroom                         as home_classroom,
                                                CONCAT(t.last_name, ' ', t.first_name, ' ',
                                                       COALESCE(t.middle_name, '')) as homeroom_teacher
                                         FROM classes c
                                                  LEFT JOIN teachers t ON c.homeroom_teacher_id = t.teacher_id
                                         WHERE c.class_id = %s
                                         """, (selected_class_id,))[0]

            class_number, student_count, home_classroom, homeroom_teacher = class_info

            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞
            schedule_data = self.db.execute("""
                                            SELECT l.day_of_week,
                                                   l.lesson_time,
                                                   s.subject_name,
                                                   CONCAT(t.last_name, ' ', t.first_name, ' ',
                                                          COALESCE(t.middle_name, '')) as teacher_name,
                                                   l.classroom
                                            FROM lessons l
                                                     JOIN subjects s ON l.subject_id = s.subject_id
                                                     JOIN teachers t ON l.teacher_id = t.teacher_id
                                            WHERE l.class_id = %s
                                            ORDER BY CASE l.day_of_week
                                                         WHEN '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫' THEN 1
                                                         WHEN '–í—Ç–æ—Ä–Ω–∏–∫' THEN 2
                                                         WHEN '–°—Ä–µ–¥–∞' THEN 3
                                                         WHEN '–ß–µ—Ç–≤–µ—Ä–≥' THEN 4
                                                         WHEN '–ü—è—Ç–Ω–∏—Ü–∞' THEN 5
                                                         WHEN '–°—É–±–±–æ—Ç–∞' THEN 6
                                                         END,
                                                     l.lesson_time
                                            """, (selected_class_id,))

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
            schedule_by_day = {}
            for day, time, subject, teacher, classroom in schedule_data:
                if day not in schedule_by_day:
                    schedule_by_day[day] = []

                time_str = time.strftime("%H:%M") if hasattr(time, 'strftime') else str(time)
                schedule_by_day[day].append({
                    'time': time_str,
                    'subject': subject,
                    'teacher': teacher,
                    'classroom': classroom
                })

            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_lessons = len(schedule_data)
            unique_subjects = len(set([row[2] for row in schedule_data]))
            unique_teachers = len(set([row[3] for row in schedule_data]))
            used_classrooms = len(set([row[4] for row in schedule_data if row[4]]))

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report_text = f"<h2>üìã –î–µ—Ç–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ {class_number}</h2>"
            report_text += f"<p><strong>–î–∞—Ç–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è:</strong> {datetime.now().strftime('%d.%m.%Y %H:%M')}</p>"

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∞—Å—Å–µ
            report_text += f"<div style='background-color: #E8D5C4; padding: 15px; border-radius: 8px; margin-bottom: 20px;'>"
            report_text += f"<h3 style='margin-top: 0; color: #5E3023;'>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∞—Å—Å–µ</h3>"
            report_text += f"<p><strong>–ö–ª–∞—Å—Å:</strong> {class_number}</p>"
            report_text += f"<p><strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–µ–Ω–∏–∫–æ–≤:</strong> {student_count}</p>"
            if homeroom_teacher:
                report_text += f"<p><strong>–ö–ª–∞—Å—Å–Ω—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å:</strong> {homeroom_teacher}</p>"
            if home_classroom:
                report_text += f"<p><strong>–î–æ–º–∞—à–Ω–∏–π –∫–∞–±–∏–Ω–µ—Ç:</strong> {home_classroom}</p>"
            report_text += f"</div>"

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            report_text += f"<div style='background-color: #F5F5F5; padding: 15px; border-radius: 8px; margin-bottom: 20px;'>"
            report_text += f"<h3 style='margin-top: 0; color: #5E3023;'>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è</h3>"
            report_text += f"<p><strong>–í—Å–µ–≥–æ —É—Ä–æ–∫–æ–≤ –≤ –Ω–µ–¥–µ–ª—é:</strong> {total_lessons}</p>"
            report_text += f"<p><strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:</strong> {unique_subjects}</p>"
            report_text += f"<p><strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∏—Ç–µ–ª–µ–π:</strong> {unique_teachers}</p>"
            report_text += f"<p><strong>–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤:</strong> {used_classrooms}</p>"
            report_text += f"</div>"

            # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –¥–Ω—è–º
            if not schedule_by_day:
                report_text += "<p style='color: #888; font-style: italic;'>–£ —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞ –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è</p>"
            else:
                days_order = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞']

                for day in days_order:
                    if day in schedule_by_day:
                        report_text += f"<h3 style='color: #5E3023; border-bottom: 2px solid #895737; padding-bottom: 5px;'>üìÖ {day}</h3>"
                        report_text += "<table border='1' cellpadding='8' style='border-collapse: collapse; width: 100%; margin-bottom: 20px;'>"
                        report_text += "<tr style='background-color: #895737; color: white;'>"
                        report_text += "<th style='width: 15%;'>–í—Ä–µ–º—è</th><th style='width: 30%;'>–ü—Ä–µ–¥–º–µ—Ç</th><th style='width: 40%;'>–£—á–∏—Ç–µ–ª—å</th><th style='width: 15%;'>–ö–∞–±–∏–Ω–µ—Ç</th></tr>"

                        for lesson in schedule_by_day[day]:
                            classroom_str = lesson['classroom'] if lesson['classroom'] else '‚Äî'
                            report_text += f"<tr>"
                            report_text += f"<td style='text-align: center; font-weight: bold;'>{lesson['time']}</td>"
                            report_text += f"<td style='font-weight: bold;'>{lesson['subject']}</td>"
                            report_text += f"<td>{lesson['teacher']}</td>"
                            report_text += f"<td style='text-align: center;'>{classroom_str}</td>"
                            report_text += f"</tr>"

                        report_text += "</table>"

            # –ê–Ω–∞–ª–∏–∑ –Ω–∞–≥—Ä—É–∑–∫–∏ –ø–æ –¥–Ω—è–º
            if schedule_by_day:
                report_text += f"<h3 style='color: #5E3023;'>üìà –ê–Ω–∞–ª–∏–∑ –Ω–∞–≥—Ä—É–∑–∫–∏ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏</h3>"
                report_text += "<table border='1' cellpadding='8' style='border-collapse: collapse; margin-bottom: 20px;'>"
                report_text += "<tr style='background-color: #895737; color: white;'>"
                report_text += "<th>–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏</th><th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–∫–æ–≤</th><th>–ü–µ—Ä–≤—ã–π —É—Ä–æ–∫</th><th>–ü–æ—Å–ª–µ–¥–Ω–∏–π —É—Ä–æ–∫</th></tr>"

                for day in days_order:
                    if day in schedule_by_day:
                        lessons_count = len(schedule_by_day[day])
                        first_lesson = schedule_by_day[day][0]['time']
                        last_lesson = schedule_by_day[day][-1]['time']

                        report_text += f"<tr>"
                        report_text += f"<td>{day}</td>"
                        report_text += f"<td style='text-align: center;'>{lessons_count}</td>"
                        report_text += f"<td style='text-align: center;'>{first_lesson}</td>"
                        report_text += f"<td style='text-align: center;'>{last_lesson}</td>"
                        report_text += f"</tr>"

                report_text += "</table>"

            self.report_content.setText(report_text)

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –∫–ª–∞—Å—Å–∞:\n{str(e)}")


    def show_students_report(self):
        """–û—Ç—á–µ—Ç –æ–± —É—á–µ–Ω–∏–∫–∞—Ö"""
        try:
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_students = self.db.execute("SELECT COUNT(*) FROM students")[0][0]

            # –ü–æ –∫–ª–∞—Å—Å–∞–º
            students_by_class = self.db.execute("""
                                                SELECT c.class_number, COUNT(s.student_id) as student_count
                                                FROM classes c
                                                         LEFT JOIN students s ON c.class_id = s.class_id
                                                GROUP BY c.class_id, c.class_number
                                                ORDER BY c.class_number
                                                """)

            # –ü–æ –ø–æ–ª—É
            gender_stats = self.db.execute("""
                                           SELECT gender, COUNT(*) as count
                                           FROM students
                                           GROUP BY gender
                                           ORDER BY gender
                                           """)

            # –ü–æ –≤–æ–∑—Ä–∞—Å—Ç—É
            age_stats = self.db.execute("""
                                        SELECT EXTRACT(YEAR FROM AGE(birth_date)) as age,
                                               COUNT(*) as count
                                        FROM students
                                        WHERE birth_date IS NOT NULL
                                        GROUP BY EXTRACT (YEAR FROM AGE(birth_date))
                                        ORDER BY age
                                        """)

            # –£—á–µ–Ω–∏–∫–∏ –±–µ–∑ –∫–ª–∞—Å—Å–∞
            students_without_class = self.db.execute("""
                                                     SELECT COUNT(*)
                                                     FROM students
                                                     WHERE class_id IS NULL
                                                     """)[0][0]

            report_text = f"<h2>üìö –û—Ç—á–µ—Ç –æ–± —É—á–µ–Ω–∏–∫–∞—Ö</h2>"
            report_text += f"<p><strong>–î–∞—Ç–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è:</strong> {datetime.now().strftime('%d.%m.%Y %H:%M')}</p>"

            report_text += f"<h3>üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>"
            report_text += f"<p><strong>–í—Å–µ–≥–æ —É—á–µ–Ω–∏–∫–æ–≤:</strong> {total_students}</p>"
            report_text += f"<p><strong>–£—á–µ–Ω–∏–∫–æ–≤ –±–µ–∑ –∫–ª–∞—Å—Å–∞:</strong> {students_without_class}</p>"

            report_text += f"<h3>üë• –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–ª–∞—Å—Å–∞–º</h3>"
            report_text += "<table border='1' cellpadding='8' style='border-collapse: collapse; width: 100%;'>"
            report_text += "<tr style='background-color: #895737; color: white;'><th>–ö–ª–∞—Å—Å</th><th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–µ–Ω–∏–∫–æ–≤</th></tr>"
            for class_number, count in students_by_class:
                report_text += f"<tr><td>{class_number}</td><td>{count}</td></tr>"
            report_text += "</table>"

            report_text += f"<h3>‚ö• –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø–æ–ª—É</h3>"
            report_text += "<table border='1' cellpadding='8' style='border-collapse: collapse;'>"
            report_text += "<tr style='background-color: #895737; color: white;'><th>–ü–æ–ª</th><th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</th></tr>"
            for gender, count in gender_stats:
                gender_name = "–ú—É–∂—Å–∫–æ–π" if gender == "–ú" else "–ñ–µ–Ω—Å–∫–∏–π"
                report_text += f"<tr><td>{gender_name}</td><td>{count}</td></tr>"
            report_text += "</table>"

            report_text += f"<h3>üéÇ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É</h3>"
            report_text += "<table border='1' cellpadding='8' style='border-collapse: collapse;'>"
            report_text += "<tr style='background-color: #895737; color: white;'><th>–í–æ–∑—Ä–∞—Å—Ç</th><th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</th></tr>"
            for age, count in age_stats:
                report_text += f"<tr><td>{int(age)} –ª–µ—Ç</td><td>{count}</td></tr>"
            report_text += "</table>"

            self.report_content.setText(report_text)

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç –æ–± —É—á–µ–Ω–∏–∫–∞—Ö:\n{str(e)}")

    def show_teachers_report(self):
        """–û—Ç—á–µ—Ç –æ–± —É—á–∏—Ç–µ–ª—è—Ö"""
        try:
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_teachers = self.db.execute("SELECT COUNT(*) FROM teachers")[0][0]

            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Å–Ω—ã—Ö —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π
            homeroom_teachers_count = self.db.execute("""
                                                      SELECT COUNT(DISTINCT homeroom_teacher_id)
                                                      FROM classes
                                                      WHERE homeroom_teacher_id IS NOT NULL
                                                      """)[0][0]

            # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—á–∏—Ç–µ–ª—è–º
            teachers_base_stats = self.db.execute("""
                                                  SELECT t.teacher_id,
                                                         CONCAT(t.last_name, ' ', t.first_name, ' ',
                                                                COALESCE(t.middle_name, '')) as full_name,
                                                         t.weekly_hours,
                                                         t.salary,
                                                         COUNT(DISTINCT s.subject_id)        as subjects_count
                                                  FROM teachers t
                                                           LEFT JOIN subjects s ON t.teacher_id = s.teacher_id
                                                  GROUP BY t.teacher_id, t.last_name, t.first_name, t.middle_name,
                                                           t.weekly_hours, t.salary
                                                  ORDER BY t.last_name, t.first_name
                                                  """)

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞—Å—Å–Ω–æ–º —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–µ –æ—Ç–¥–µ–ª—å–Ω–æ
            homeroom_info = {}
            homeroom_data = self.db.execute("""
                                            SELECT homeroom_teacher_id, class_number
                                            FROM classes
                                            WHERE homeroom_teacher_id IS NOT NULL
                                            ORDER BY class_number
                                            """)

            for teacher_id, class_number in homeroom_data:
                if teacher_id not in homeroom_info:
                    homeroom_info[teacher_id] = []
                homeroom_info[teacher_id].append(class_number)

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–µ
            salary_stats = self.db.execute("""
                                           SELECT MIN(salary) as min_salary,
                                                  MAX(salary) as max_salary,
                                                  AVG(salary) as avg_salary,
                                                  SUM(salary) as total_salary
                                           FROM teachers
                                           WHERE salary IS NOT NULL
                                           """)[0]

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —á–∞—Å–∞–º
            hours_stats = self.db.execute("""
                                          SELECT MIN(weekly_hours) as min_hours,
                                                 MAX(weekly_hours) as max_hours,
                                                 AVG(weekly_hours) as avg_hours,
                                                 SUM(weekly_hours) as total_hours
                                          FROM teachers
                                          WHERE weekly_hours IS NOT NULL
                                          """)[0]

            report_text = f"<h2>üë®‚Äçüè´ –û—Ç—á–µ—Ç –æ–± —É—á–∏—Ç–µ–ª—è—Ö</h2>"
            report_text += f"<p><strong>–î–∞—Ç–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è:</strong> {datetime.now().strftime('%d.%m.%Y %H:%M')}</p>"

            report_text += f"<h3>üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>"
            report_text += f"<p><strong>–í—Å–µ–≥–æ —É—á–∏—Ç–µ–ª–µ–π:</strong> {total_teachers}</p>"
            report_text += f"<p><strong>–ö–ª–∞—Å—Å–Ω—ã—Ö —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π:</strong> {homeroom_teachers_count}</p>"

            if salary_stats[0] is not None:
                report_text += f"<h3>üí∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–µ</h3>"
                report_text += f"<p><strong>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞:</strong> {salary_stats[0]:,} —Ä—É–±.</p>"
                report_text += f"<p><strong>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞:</strong> {salary_stats[1]:,} —Ä—É–±.</p>"
                report_text += f"<p><strong>–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞:</strong> {salary_stats[2]:,.0f} —Ä—É–±.</p>"
                report_text += f"<p><strong>–û–±—â–∏–π —Ñ–æ–Ω–¥ –æ–ø–ª–∞—Ç—ã —Ç—Ä—É–¥–∞:</strong> {salary_stats[3]:,} —Ä—É–±.</p>"

            if hours_stats[0] is not None:
                report_text += f"<h3>‚è∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–∞–≥—Ä—É–∑–∫–µ</h3>"
                report_text += f"<p><strong>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞:</strong> {hours_stats[0]} —á/–Ω–µ–¥</p>"
                report_text += f"<p><strong>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞:</strong> {hours_stats[1]} —á/–Ω–µ–¥</p>"
                report_text += f"<p><strong>–°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞:</strong> {hours_stats[2]:.1f} —á/–Ω–µ–¥</p>"
                report_text += f"<p><strong>–û–±—â–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞:</strong> {hours_stats[3]} —á/–Ω–µ–¥</p>"

            report_text += f"<h3>üë• –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —É—á–∏—Ç–µ–ª—è–º</h3>"
            report_text += "<table border='1' cellpadding='8' style='border-collapse: collapse; width: 100%;'>"
            report_text += "<tr style='background-color: #895737; color: white;'>"
            report_text += "<th>–§–ò–û</th><th>–ù–µ–¥–µ–ª—å–Ω—ã–µ —á–∞—Å—ã</th><th>–ó–∞—Ä–ø–ª–∞—Ç–∞</th><th>–ü—Ä–µ–¥–º–µ—Ç–æ–≤</th><th>–ö–ª–∞—Å—Å–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ</th></tr>"

            for teacher_data in teachers_base_stats:
                teacher_id, full_name, weekly_hours, salary, subjects_count = teacher_data
                salary_str = f"{salary:,} —Ä—É–±." if salary else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
                hours_str = f"{weekly_hours} —á/–Ω–µ–¥" if weekly_hours else "–ù–µ —É–∫–∞–∑–∞–Ω—ã"

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –∫–ª–∞—Å—Å–Ω–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞
                if teacher_id in homeroom_info:
                    classes_list = ", ".join(homeroom_info[teacher_id])
                    homeroom_str = f"–î–∞ ({classes_list})"
                else:
                    homeroom_str = "–ù–µ—Ç"

                report_text += f"<tr>"
                report_text += f"<td>{full_name}</td>"
                report_text += f"<td>{hours_str}</td>"
                report_text += f"<td>{salary_str}</td>"
                report_text += f"<td>{subjects_count}</td>"
                report_text += f"<td>{homeroom_str}</td>"
                report_text += f"</tr>"

            report_text += "</table>"

            self.report_content.setText(report_text)

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç –æ–± —É—á–∏—Ç–µ–ª—è—Ö:\n{str(e)}")

    def show_subjects_report(self):
        """–û—Ç—á–µ—Ç –æ –ø—Ä–µ–¥–º–µ—Ç–∞—Ö"""
        try:
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_subjects = self.db.execute("SELECT COUNT(*) FROM subjects")[0][0]

            # –ü—Ä–µ–¥–º–µ—Ç—ã —Å —É—á–∏—Ç–µ–ª—è–º–∏ –∏ –±–µ–∑
            subjects_with_teachers = self.db.execute("""
                                                     SELECT COUNT(*)
                                                     FROM subjects
                                                     WHERE teacher_id IS NOT NULL
                                                     """)[0][0]

            subjects_without_teachers = total_subjects - subjects_with_teachers

            # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–¥–º–µ—Ç–∞—Ö
            subjects_detail = self.db.execute("""
                                              SELECT s.subject_name,
                                                     CONCAT(t.last_name, ' ', t.first_name, ' ',
                                                            COALESCE(t.middle_name, '')) as teacher_name,
                                                     s.weekly_hours,
                                                     COUNT(DISTINCT l.lesson_id)         as lessons_count,
                                                     COUNT(DISTINCT g.student_id)        as students_with_grades
                                              FROM subjects s
                                                       LEFT JOIN teachers t ON s.teacher_id = t.teacher_id
                                                       LEFT JOIN lessons l ON s.subject_id = l.subject_id
                                                       LEFT JOIN grades g ON s.subject_id = g.subject_id
                                              GROUP BY s.subject_id, s.subject_name, t.last_name, t.first_name,
                                                       t.middle_name, s.weekly_hours
                                              ORDER BY s.subject_name
                                              """)

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —á–∞—Å–∞–º
            hours_stats = self.db.execute("""
                                          SELECT MIN(weekly_hours) as min_hours,
                                                 MAX(weekly_hours) as max_hours,
                                                 AVG(weekly_hours) as avg_hours,
                                                 SUM(weekly_hours) as total_hours
                                          FROM subjects
                                          WHERE weekly_hours IS NOT NULL
                                          """)[0]

            report_text = f"<h2>üìñ –û—Ç—á–µ—Ç –æ –ø—Ä–µ–¥–º–µ—Ç–∞—Ö</h2>"
            report_text += f"<p><strong>–î–∞—Ç–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è:</strong> {datetime.now().strftime('%d.%m.%Y %H:%M')}</p>"

            report_text += f"<h3>üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>"
            report_text += f"<p><strong>–í—Å–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:</strong> {total_subjects}</p>"
            report_text += f"<p><strong>–ü—Ä–µ–¥–º–µ—Ç–æ–≤ —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º–∏ —É—á–∏—Ç–µ–ª—è–º–∏:</strong> {subjects_with_teachers}</p>"
            report_text += f"<p><strong>–ü—Ä–µ–¥–º–µ—Ç–æ–≤ –±–µ–∑ —É—á–∏—Ç–µ–ª–µ–π:</strong> {subjects_without_teachers}</p>"

            if hours_stats[0]:
                report_text += f"<h3>‚è∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–µ–¥–µ–ª—å–Ω—ã–º —á–∞—Å–∞–º</h3>"
                report_text += f"<p><strong>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞:</strong> {hours_stats[0]} —á/–Ω–µ–¥</p>"
                report_text += f"<p><strong>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞:</strong> {hours_stats[1]} —á/–Ω–µ–¥</p>"
                report_text += f"<p><strong>–°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞:</strong> {hours_stats[2]:.1f} —á/–Ω–µ–¥</p>"
                report_text += f"<p><strong>–û–±—â–∞—è –Ω–µ–¥–µ–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞:</strong> {hours_stats[3]} —á/–Ω–µ–¥</p>"

            report_text += f"<h3>üìö –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º</h3>"
            report_text += "<table border='1' cellpadding='8' style='border-collapse: collapse; width: 100%;'>"
            report_text += "<tr style='background-color: #895737; color: white;'>"
            report_text += "<th>–ü—Ä–µ–¥–º–µ—Ç</th><th>–£—á–∏—Ç–µ–ª—å</th><th>–ù–µ–¥–µ–ª—å–Ω—ã–µ —á–∞—Å—ã</th><th>–£—Ä–æ–∫–æ–≤ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏</th><th>–£—á–µ–Ω–∏–∫–æ–≤ —Å –æ—Ü–µ–Ω–∫–∞–º–∏</th></tr>"

            for subject_data in subjects_detail:
                subject_name, teacher_name, weekly_hours, lessons_count, students_with_grades = subject_data
                teacher_str = teacher_name if teacher_name else "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
                hours_str = f"{weekly_hours} —á/–Ω–µ–¥" if weekly_hours else "–ù–µ —É–∫–∞–∑–∞–Ω—ã"

                report_text += f"<tr>"
                report_text += f"<td>{subject_name}</td>"
                report_text += f"<td>{teacher_str}</td>"
                report_text += f"<td>{hours_str}</td>"
                report_text += f"<td>{lessons_count}</td>"
                report_text += f"<td>{students_with_grades}</td>"
                report_text += f"</tr>"

            report_text += "</table>"

            self.report_content.setText(report_text)

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç –æ –ø—Ä–µ–¥–º–µ—Ç–∞—Ö:\n{str(e)}")

    def show_schedule_report(self):
        """–û—Ç—á–µ—Ç –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏"""
        try:
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_lessons = self.db.execute("SELECT COUNT(*) FROM lessons")[0][0]

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
            lessons_by_day = self.db.execute("""
                                             SELECT day_of_week,
                                                    COUNT(*) as lessons_count
                                             FROM lessons
                                             GROUP BY day_of_week
                                             ORDER BY CASE day_of_week
                                                          WHEN '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫' THEN 1
                                                          WHEN '–í—Ç–æ—Ä–Ω–∏–∫' THEN 2
                                                          WHEN '–°—Ä–µ–¥–∞' THEN 3
                                                          WHEN '–ß–µ—Ç–≤–µ—Ä–≥' THEN 4
                                                          WHEN '–ü—è—Ç–Ω–∏—Ü–∞' THEN 5
                                                          WHEN '–°—É–±–±–æ—Ç–∞' THEN 6
                                                          END
                                             """)

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            lessons_by_time = self.db.execute("""
                                              SELECT lesson_time,
                                                     COUNT(*) as lessons_count
                                              FROM lessons
                                              GROUP BY lesson_time
                                              ORDER BY lesson_time
                                              """)

            # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–∞–±–∏–Ω–µ—Ç–æ–≤
            classroom_usage = self.db.execute("""
                                              SELECT classroom,
                                                     COUNT(*) as usage_count
                                              FROM lessons
                                              WHERE classroom IS NOT NULL
                                              GROUP BY classroom
                                              ORDER BY usage_count DESC
                                              """)

            # –ù–∞–≥—Ä—É–∑–∫–∞ —É—á–∏—Ç–µ–ª–µ–π –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
            teacher_schedule_load = self.db.execute("""
                                                    SELECT CONCAT(t.last_name, ' ', t.first_name, ' ',
                                                                  COALESCE(t.middle_name, '')) as teacher_name,
                                                           COUNT(l.lesson_id)                  as lessons_per_week
                                                    FROM teachers t
                                                             LEFT JOIN lessons l ON t.teacher_id = l.teacher_id
                                                    GROUP BY t.teacher_id, t.last_name, t.first_name, t.middle_name
                                                    HAVING COUNT(l.lesson_id) > 0
                                                    ORDER BY lessons_per_week DESC
                                                    """)

            report_text = f"<h2>üïê –û—Ç—á–µ—Ç –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏</h2>"
            report_text += f"<p><strong>–î–∞—Ç–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è:</strong> {datetime.now().strftime('%d.%m.%Y %H:%M')}</p>"

            report_text += f"<h3>üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>"
            report_text += f"<p><strong>–í—Å–µ–≥–æ —É—Ä–æ–∫–æ–≤ –≤ –Ω–µ–¥–µ–ª—é:</strong> {total_lessons}</p>"

            report_text += f"<h3>üìÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏</h3>"
            report_text += "<table border='1' cellpadding='8' style='border-collapse: collapse;'>"
            report_text += "<tr style='background-color: #895737; color: white;'><th>–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏</th><th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–∫–æ–≤</th></tr>"
            for day, count in lessons_by_day:
                report_text += f"<tr><td>{day}</td><td>{count}</td></tr>"
            report_text += "</table>"

            report_text += f"<h3>‚è∞ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏</h3>"
            report_text += "<table border='1' cellpadding='8' style='border-collapse: collapse;'>"
            report_text += "<tr style='background-color: #895737; color: white;'><th>–í—Ä–µ–º—è —É—Ä–æ–∫–∞</th><th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–∫–æ–≤</th></tr>"
            for time, count in lessons_by_time:
                time_str = time.strftime("%H:%M") if hasattr(time, 'strftime') else str(time)
                report_text += f"<tr><td>{time_str}</td><td>{count}</td></tr>"
            report_text += "</table>"

            report_text += f"<h3>üè´ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–∞–±–∏–Ω–µ—Ç–æ–≤</h3>"
            report_text += "<table border='1' cellpadding='8' style='border-collapse: collapse;'>"
            report_text += "<tr style='background-color: #895737; color: white;'><th>–ö–∞–±–∏–Ω–µ—Ç</th><th>–ó–∞–Ω—è—Ç–æ—Å—Ç—å (—É—Ä–æ–∫–æ–≤ –≤ –Ω–µ–¥–µ–ª—é)</th></tr>"
            for classroom, usage in classroom_usage[:10]:  # –¢–æ–ø 10 —Å–∞–º—ã—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö
                report_text += f"<tr><td>–ö–∞–±–∏–Ω–µ—Ç {classroom}</td><td>{usage}</td></tr>"
            report_text += "</table>"

            report_text += f"<h3>üë®‚Äçüè´ –ù–∞–≥—Ä—É–∑–∫–∞ —É—á–∏—Ç–µ–ª–µ–π –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é</h3>"
            report_text += "<table border='1' cellpadding='8' style='border-collapse: collapse; width: 100%;'>"
            report_text += "<tr style='background-color: #895737; color: white;'><th>–£—á–∏—Ç–µ–ª—å</th><th>–£—Ä–æ–∫–æ–≤ –≤ –Ω–µ–¥–µ–ª—é</th></tr>"
            for teacher_name, lessons_count in teacher_schedule_load:
                report_text += f"<tr><td>{teacher_name}</td><td>{lessons_count}</td></tr>"
            report_text += "</table>"

            self.report_content.setText(report_text)

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏:\n{str(e)}")

    def show_student_progress_detailed_report(self):
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ–± —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏ —É—á–µ–Ω–∏–∫–æ–≤ –∫–∞–∫ –≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–º –¥–Ω–µ–≤–Ω–∏–∫–µ"""
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ç—á–µ—Ç–∞
            dialog = QDialog(self)
            dialog.setWindowTitle("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç—á–µ—Ç–∞ –æ–± —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏")
            dialog.setFixedSize(450, 350)
            dialog.setStyleSheet(APP_STYLE)

            layout = QVBoxLayout()

            # –í—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞
            layout.addWidget(QLabel("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å:"))
            class_combo = QComboBox()
            class_combo.addItem("–í—Å–µ –∫–ª–∞—Å—Å—ã", None)

            classes = self.db.execute("SELECT class_id, class_number FROM classes ORDER BY class_number")
            for class_id, class_number in classes:
                class_combo.addItem(class_number, class_id)
            layout.addWidget(class_combo)

            # –í—ã–±–æ—Ä —É—á–µ–Ω–∏–∫–∞
            layout.addWidget(QLabel("–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):"))
            student_combo = QComboBox()
            student_combo.addItem("–í—Å–µ —É—á–µ–Ω–∏–∫–∏", None)
            layout.addWidget(student_combo)

            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—á–µ–Ω–∏–∫–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–ª–∞—Å—Å–∞
            def update_students_list():
                student_combo.clear()
                student_combo.addItem("–í—Å–µ —É—á–µ–Ω–∏–∫–∏", None)

                selected_class_id = class_combo.currentData()
                if selected_class_id:
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º —É—á–µ–Ω–∏–∫–æ–≤ —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
                    students = self.db.execute("""
                                               SELECT student_id,
                                                      CONCAT(last_name, ' ', first_name, ' ', COALESCE(middle_name, '')) as full_name
                                               FROM students
                                               WHERE class_id = %s
                                               ORDER BY last_name, first_name
                                               """, (selected_class_id,))
                else:
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤
                    students = self.db.execute("""
                                               SELECT student_id,
                                                      CONCAT(last_name, ' ', first_name, ' ', COALESCE(middle_name, '')) as full_name
                                               FROM students
                                               ORDER BY last_name, first_name
                                               """)

                for student_id, full_name in students:
                    student_combo.addItem(full_name, student_id)

            # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—á–µ–Ω–∏–∫–æ–≤ –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—é –∫–ª–∞—Å—Å–∞
            class_combo.currentIndexChanged.connect(update_students_list)

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤
            update_students_list()

            # –í—ã–±–æ—Ä —É—á–µ–±–Ω–æ–≥–æ –≥–æ–¥–∞
            layout.addWidget(QLabel("–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–±–Ω—ã–π –≥–æ–¥:"))
            year_combo = QComboBox()
            year_combo.addItem("–¢–µ–∫—É—â–∏–π —É—á–µ–±–Ω—ã–π –≥–æ–¥", "current")

            years = self.db.execute(
                "SELECT DISTINCT academic_year FROM student_progress WHERE academic_year IS NOT NULL ORDER BY academic_year DESC")
            for year_tuple in years:
                year = year_tuple[0]
                if year:
                    year_combo.addItem(year, year)
            layout.addWidget(year_combo)

            # –û–ø—Ü–∏—è: –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ —É—á–µ–Ω–∏–∫–æ–≤ —Å –æ—Ü–µ–Ω–∫–∞–º–∏
            layout.addWidget(QLabel("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏:"))
            only_with_grades_check = QCheckBox("–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ —É—á–µ–Ω–∏–∫–æ–≤ —Å –æ—Ü–µ–Ω–∫–∞–º–∏")
            only_with_grades_check.setChecked(True)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω–æ
            layout.addWidget(only_with_grades_check)

            # –ö–Ω–æ–ø–∫–∏
            btn_layout = QHBoxLayout()
            generate_btn = QPushButton("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç")
            cancel_btn = QPushButton("–û—Ç–º–µ–Ω–∞")
            btn_layout.addWidget(generate_btn)
            btn_layout.addWidget(cancel_btn)
            layout.addLayout(btn_layout)

            dialog.setLayout(layout)

            def generate_report():
                dialog.accept()

            def cancel_report():
                dialog.reject()

            generate_btn.clicked.connect(generate_report)
            cancel_btn.clicked.connect(cancel_report)

            if dialog.exec_() != QDialog.Accepted:
                return

            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            selected_class_id = class_combo.currentData()
            selected_student_id = student_combo.currentData()
            selected_year = year_combo.currentData()
            only_with_grades = only_with_grades_check.isChecked()

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ü–µ–Ω–æ–∫ –Ω–∞–ø—Ä—è–º—É—é
            query = """
                    SELECT s.student_id, \
                           CONCAT(s.last_name, ' ', s.first_name, ' ', COALESCE(s.middle_name, '')) as student_name, \
                           c.class_number, \
                           sub.subject_name, \
                           g.grade, \
                           g.grade_date
                    FROM students s
                             LEFT JOIN classes c ON s.class_id = c.class_id \
                    """

            # –î–æ–±–∞–≤–ª—è–µ–º JOIN —Å grades —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω—ã —É—á–µ–Ω–∏–∫–∏ —Å –æ—Ü–µ–Ω–∫–∞–º–∏
            if only_with_grades:
                query += " INNER JOIN grades g ON s.student_id = g.student_id"
            else:
                query += " LEFT JOIN grades g ON s.student_id = g.student_id"

            query += " LEFT JOIN subjects sub ON g.subject_id = sub.subject_id WHERE 1=1"

            params = []

            # –§–∏–ª—å—Ç—Ä –ø–æ –∫–ª–∞—Å—Å—É
            if selected_class_id:
                query += " AND s.class_id = %s"
                params.append(selected_class_id)

            # –§–∏–ª—å—Ç—Ä –ø–æ —É—á–µ–Ω–∏–∫—É
            if selected_student_id:
                query += " AND s.student_id = %s"
                params.append(selected_student_id)

            # –§–∏–ª—å—Ç—Ä –ø–æ —É—á–µ–±–Ω–æ–º—É –≥–æ–¥—É
            if selected_year == "current":
                query += """ AND (g.grade_date IS NULL OR g.grade_date >= CASE 
                            WHEN EXTRACT(MONTH FROM CURRENT_DATE) >= 9 
                            THEN DATE_TRUNC('year', CURRENT_DATE) + INTERVAL '8 months'
                            ELSE DATE_TRUNC('year', CURRENT_DATE) - INTERVAL '4 months'
                        END
                        AND g.grade_date <= CASE 
                            WHEN EXTRACT(MONTH FROM CURRENT_DATE) >= 9 
                            THEN DATE_TRUNC('year', CURRENT_DATE) + INTERVAL '1 year' + INTERVAL '4 months'
                            ELSE DATE_TRUNC('year', CURRENT_DATE) + INTERVAL '4 months'
                        END)"""
            elif selected_year and selected_year != "current":
                start_year = selected_year.split('-')[0]
                end_year = selected_year.split('-')[1]
                query += f" AND (g.grade_date IS NULL OR (g.grade_date >= '{start_year}-09-01' AND g.grade_date <= '{end_year}-05-31'))"

            query += " ORDER BY s.last_name, s.first_name, sub.subject_name, g.grade_date"

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            data = self.db.execute(query, params)

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —É—á–µ–Ω–∏–∫–∞–º –∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º
            student_data = {}
            for row in data:
                student_id, student_name, class_number, subject_name, grade, grade_date = row

                # –î–æ–±–∞–≤–ª—è–µ–º —É—á–µ–Ω–∏–∫–∞ –≤ —Å–ª–æ–≤–∞—Ä—å, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
                if student_id not in student_data:
                    student_data[student_id] = {
                        'name': student_name,
                        'class': class_number or '–ë–µ–∑ –∫–ª–∞—Å—Å–∞',
                        'subjects': {}
                    }

                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                if subject_name and grade:
                    if subject_name not in student_data[student_id]['subjects']:
                        student_data[student_id]['subjects'][subject_name] = []
                    student_data[student_id]['subjects'][subject_name].append(grade)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report_text = f"<h2>üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ–± —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏ —É—á–µ–Ω–∏–∫–æ–≤</h2>"
            report_text += f"<p><strong>–î–∞—Ç–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è:</strong> {datetime.now().strftime('%d.%m.%Y %H:%M')}</p>"

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–∞—Ö
            if selected_class_id:
                class_name = class_combo.currentText()
                report_text += f"<p><strong>–ö–ª–∞—Å—Å:</strong> {class_name}</p>"
            if selected_student_id:
                student_name = student_combo.currentText()
                report_text += f"<p><strong>–£—á–µ–Ω–∏–∫:</strong> {student_name}</p>"

            year_name = year_combo.currentText()
            report_text += f"<p><strong>–£—á–µ–±–Ω—ã–π –≥–æ–¥:</strong> {year_name}</p>"

            if only_with_grades:
                report_text += f"<p><strong>–ü–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ —É—á–µ–Ω–∏–∫–∏ —Å –æ—Ü–µ–Ω–∫–∞–º–∏</strong></p>"

            students_count = len(student_data)
            report_text += f"<p><strong>–ù–∞–π–¥–µ–Ω–æ —É—á–µ–Ω–∏–∫–æ–≤:</strong> {students_count}</p><hr>"

            if not student_data:
                report_text += "<p><strong>–ü–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</strong></p>"
            else:
                for student_id, student_info in student_data.items():
                    report_text += f"<div style='margin-bottom: 30px; padding: 15px; border: 2px solid #895737; border-radius: 8px;'>"
                    report_text += f"<h3 style='color: #5E3023; margin-top: 0;'>üë§ {student_info['name']} ({student_info['class']})</h3>"

                    if student_info['subjects']:
                        report_text += "<table border='1' cellpadding='8' style='border-collapse: collapse; width: 100%; margin-top: 10px;'>"
                        report_text += "<tr style='background-color: #895737; color: white;'>"
                        report_text += "<th style='width: 25%;'>–ü—Ä–µ–¥–º–µ—Ç</th><th style='width: 55%;'>–û—Ü–µ–Ω–∫–∏</th><th style='width: 20%;'>–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª</th></tr>"

                        total_avg = 0
                        subject_count = 0

                        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        sorted_subjects = sorted(student_info['subjects'].items())

                        for subject_name, grades in sorted_subjects:
                            if grades:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Ü–µ–Ω–∫–∏
                                grades_str = ' '.join(map(str, grades))
                                avg_grade = sum(grades) / len(grades)
                                total_avg += avg_grade
                                subject_count += 1

                                # –¶–≤–µ—Ç –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ –±–∞–ª–ª–∞
                                if avg_grade >= 4.5:
                                    avg_color = "green"
                                elif avg_grade >= 3.5:
                                    avg_color = "orange"
                                else:
                                    avg_color = "red"

                                report_text += f"<tr>"
                                report_text += f"<td><strong>{subject_name}</strong></td>"
                                report_text += f"<td style='font-family: monospace; letter-spacing: 2px;'>{grades_str}</td>"
                                report_text += f"<td style='color: {avg_color}; font-weight: bold; text-align: center;'>{avg_grade:.1f}</td>"
                                report_text += f"</tr>"

                        # –û–±—â–∏–π —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –£—á–µ–Ω–∏–∫–∞
                        if subject_count > 0:
                            overall_avg = total_avg / subject_count
                            if overall_avg >= 4.5:
                                overall_color = "green"
                            elif overall_avg >= 3.5:
                                overall_color = "orange"
                            else:
                                overall_color = "red"

                            report_text += f"<tr style='background-color: #E8D5C4; font-weight: bold;'>"
                            report_text += f"<td>–û–ë–©–ò–ô –°–†–ï–î–ù–ò–ô –ë–ê–õ–õ</td>"
                            report_text += f"<td style='text-align: center;'>‚Äî</td>"
                            report_text += f"<td style='color: {overall_color}; text-align: center; font-size: 16px;'>{overall_avg:.1f}</td>"
                            report_text += f"</tr>"

                        report_text += "</table>"
                    else:
                        report_text += "<p style='color: #888; font-style: italic;'>–û—Ü–µ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</p>"

                    report_text += "</div>"

            self.report_content.setText(report_text)

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç –æ–± —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏:\n{str(e)}")
            import traceback
            print("–ü–æ–¥—Ä–æ–±–Ω–∞—è –æ—à–∏–±–∫–∞:", traceback.format_exc())



    def export_table_to_csv(self, table, file_path):
        with open(file_path, 'w', newline='', encoding='utf-8-sig') as csvfile:
            writer = csv.writer(csvfile, delimiter=',', quotechar='"', quoting=csv.QUOTE_ALL)

            # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            headers = []
            for col in range(table.columnCount()):
                headers.append(table.horizontalHeaderItem(col).text())
            writer.writerow(headers)

            # –î–∞–Ω–Ω—ã–µ
            for row in range(table.rowCount()):
                row_data = []
                for col in range(table.columnCount()):
                    item = table.item(row, col)
                    text = item.text() if item else ""
                    # –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
                    text = text.replace('\n', ' ').replace('\r', ' ').strip()
                    row_data.append(text)
                writer.writerow(row_data)

    def export_current_tab_to_csv(self):
        current_index = self.tabs.currentIndex()
        tab_name = self.tabs.tabText(current_index)

        table = None
        search_input = None

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –∏ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É –≤–∫–ª–∞–¥–∫–∏
        if current_index == 0:  # –£—á–µ–Ω–∏–∫–∏
            table = self.students_table
            search_input = self.student_search
        elif current_index == 1:  # –£—á–∏—Ç–µ–ª—è
            table = self.teachers_table
            search_input = self.teacher_search
        elif current_index == 2:  # –ö–ª–∞—Å—Å—ã
            table = self.classes_table
            search_input = self.class_search
        elif current_index == 3:  # –ü—Ä–µ–¥–º–µ—Ç—ã
            table = self.subjects_table
            search_input = self.subject_search
        elif current_index == 4:  # –û—Ü–µ–Ω–∫–∏
            table = self.grades_table
            search_input = None  # –£ –æ—Ü–µ–Ω–æ–∫ –Ω–µ—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–æ–ª—è –ø–æ–∏—Å–∫–∞
        elif current_index == 5:  # –ò—Ç–æ–≥–æ–≤—ã–µ –æ—Ü–µ–Ω–∫–∏
            table = self.progress_table
            search_input = None
        elif current_index == 6:  # –û—Ç—á–µ—Ç—ã
            QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
            return

        if not table:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return

        try:
            search_text = ""
            if search_input and hasattr(search_input, 'text'):
                search_text = search_input.text()

            # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            safe_tab_name = tab_name.replace(" ", "_").replace("/", "_")
            default_name = f"{safe_tab_name}_{search_text if search_text else 'all'}.csv"
            # –£–±–∏—Ä–∞–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            default_name = "".join(c for c in default_name if c.isalnum() or c in "._-")

            file_path, _ = QFileDialog.getSaveFileName(
                self,
                "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å CSV",
                os.path.expanduser(f"~/{default_name}"),
                "CSV Files (*.csv)"
            )

            if not file_path:
                return

            self.export_table_to_csv(table, file_path)

            QMessageBox.information(
                self,
                "–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω",
                f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ CSV:\n{file_path}"
            )
        except Exception as e:
            QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ CSV",
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ CSV:\n{str(e)}"
            )



    def export_current_tab_to_pdf(self):
        current_index = self.tabs.currentIndex()
        tab_name = self.tabs.tabText(current_index)

        # –ü–†–û–í–ï–†–Ø–ï–ú, –ï–°–õ–ò –≠–¢–û –í–ö–õ–ê–î–ö–ê –û–¢–ß–ï–¢–û–í - –ò–°–ü–†–ê–í–õ–ï–ù–û!
        if tab_name == "–û—Ç—á–µ—Ç—ã":  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –≤–º–µ—Å—Ç–æ –∏–Ω–¥–µ–∫—Å–∞
            self.export_report_to_pdf()
            return

        table = None
        search_input = None

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –∏ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≤–∫–ª–∞–¥–∫–∏
        if tab_name == "–£—á–µ–Ω–∏–∫–∏":
            table = self.students_table
            search_input = self.student_search
        elif tab_name == "–£—á–∏—Ç–µ–ª—è":
            table = self.teachers_table
            search_input = self.teacher_search
        elif tab_name == "–ö–ª–∞—Å—Å—ã":
            table = self.classes_table
            search_input = self.class_search
        elif tab_name == "–ü—Ä–µ–¥–º–µ—Ç—ã":
            table = self.subjects_table
            search_input = self.subject_search
        elif tab_name == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
            table = self.lessons_table
            search_input = None
        elif tab_name == "–û—Ü–µ–Ω–∫–∏":
            table = self.grades_table
            search_input = None
        elif tab_name == "–ò—Ç–æ–≥–æ–≤—ã–µ –æ—Ü–µ–Ω–∫–∏":
            table = self.progress_table
            search_input = None

        if not table:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–≠–∫—Å–ø–æ—Ä—Ç –≤–∫–ª–∞–¥–∫–∏ '{tab_name}' –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
            return

        try:
            search_text = ""
            if search_input and hasattr(search_input, 'text'):
                search_text = search_input.text()

            # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            safe_tab_name = tab_name.replace(" ", "_").replace("/", "_")
            default_name = f"{safe_tab_name}_{search_text if search_text else 'all'}.pdf"
            # –£–±–∏—Ä–∞–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            default_name = "".join(c for c in default_name if c.isalnum() or c in "._-")

            file_path, _ = QFileDialog.getSaveFileName(
                self,
                "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å PDF",
                os.path.expanduser(f"~/{default_name}"),
                "PDF Files (*.pdf)"
            )

            if not file_path:
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥—É–ª–µ–π –¥–ª—è PDF
            try:
                from PyQt5.QtPrintSupport import QPrinter
                from PyQt5.QtGui import QTextDocument, QTextCursor, QTextTableFormat, QFont
            except ImportError as e:
                QMessageBox.critical(
                    self,
                    "–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞",
                    f"–ù–µ —É–¥–∞–µ—Ç—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è PDF:\n{str(e)}\n\n"
                    "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é PyQt5 —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–∏–Ω—Ç–µ—Ä–∞:\n"
                    "pip install PyQt5[all]"
                )
                return

            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–Ω—Ç–µ—Ä
            printer = QPrinter(QPrinter.HighResolution)
            printer.setOutputFormat(QPrinter.PdfFormat)
            printer.setOutputFileName(file_path)

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –æ—Ç—Å—Ç—É–ø—ã
            printer.setPageSize(QPrinter.A4)
            printer.setPageMargins(20, 20, 20, 20, QPrinter.Millimeter)

            # –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            doc = QTextDocument()
            cursor = QTextCursor(doc)

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            title_format = cursor.charFormat()
            title_font = QFont("Arial", 16, QFont.Bold)
            title_format.setFont(title_font)
            cursor.setCharFormat(title_format)
            cursor.insertText(f"–û—Ç—á–µ—Ç: {tab_name}\n")

            if search_text:
                cursor.insertText(f"–§–∏–ª—å—Ç—Ä: {search_text}\n")

            cursor.insertText(f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ
            if table.rowCount() == 0:
                cursor.insertText("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            else:
                # –°–±—Ä–æ—Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
                normal_format = cursor.charFormat()
                normal_font = QFont("Arial", 9)
                normal_format.setFont(normal_font)
                cursor.setCharFormat(normal_format)

                # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
                table_format = QTextTableFormat()
                table_format.setBorder(1)
                table_format.setBorderStyle(1)
                table_format.setCellPadding(3)
                table_format.setHeaderRowCount(1)

                pdf_table = cursor.insertTable(
                    table.rowCount() + 1,
                    table.columnCount(),
                    table_format
                )

                # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
                header_format = cursor.charFormat()
                header_font = QFont("Arial", 9, QFont.Bold)
                header_format.setFont(header_font)

                for col in range(table.columnCount()):
                    cell_cursor = pdf_table.cellAt(0, col).firstCursorPosition()
                    cell_cursor.setCharFormat(header_format)
                    header_item = table.horizontalHeaderItem(col)
                    header_text = header_item.text() if header_item else f"–ö–æ–ª–æ–Ω–∫–∞ {col + 1}"
                    cell_cursor.insertText(header_text)

                # –î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
                for row in range(table.rowCount()):
                    for col in range(table.columnCount()):
                        cell_cursor = pdf_table.cellAt(row + 1, col).firstCursorPosition()
                        cell_cursor.setCharFormat(normal_format)
                        item = table.item(row, col)
                        text = item.text() if item else ""

                        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        if len(text) > 25:
                            text = text[:22] + "..."

                        cell_cursor.insertText(text)

            # –ü–µ—á–∞—Ç—å –≤ PDF
            doc.print_(printer)

            QMessageBox.information(
                self,
                "–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω",
                f"PDF –¥–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:\n{file_path}"
            )

        except Exception as e:
            QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ PDF",
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ PDF:\n{str(e)}\n\n"
                f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}"
            )
            import traceback
            print("–ü–æ–¥—Ä–æ–±–Ω–∞—è –æ—à–∏–±–∫–∞:", traceback.format_exc())

    def export_report_to_pdf(self):
        """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–æ–≤ –≤ PDF - –ò–°–ü–†–ê–í–õ–ï–ù–ê –û–®–ò–ë–ö–ê QSize"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            report_text = self.report_content.text()

            if not report_text or report_text == "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞":
                QMessageBox.warning(
                    self,
                    "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
                    "–°–Ω–∞—á–∞–ª–∞ —Å—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ –æ—Ç—á–µ—Ç, –∑–∞—Ç–µ–º —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –µ–≥–æ –≤ PDF"
                )
                return

            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
            lines = report_text.split('\n')
            report_title = "–û—Ç—á–µ—Ç"
            for line in lines:
                if line.strip() and not line.startswith('<'):
                    report_title = line.strip()
                    break

            # –î–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
            default_filename = f"{report_title.replace(' ', '_').replace(':', '')}.pdf"
            default_filename = "".join(c for c in default_filename if c.isalnum() or c in "._-")

            file_path, _ = QFileDialog.getSaveFileName(
                self,
                "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –≤ PDF",
                os.path.expanduser(f"~/{default_filename}"),
                "PDF Files (*.pdf)"
            )

            if not file_path:
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥—É–ª–µ–π –¥–ª—è PDF
            try:
                from PyQt5.QtPrintSupport import QPrinter
                from PyQt5.QtGui import QTextDocument
                from PyQt5.QtCore import QSizeF  # –î–û–ë–ê–í–õ–Ø–ï–ú –ò–ú–ü–û–†–¢ QSizeF
            except ImportError as e:
                QMessageBox.critical(
                    self,
                    "–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞",
                    f"–ù–µ —É–¥–∞–µ—Ç—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è PDF:\n{str(e)}\n\n"
                    "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é PyQt5 —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–∏–Ω—Ç–µ—Ä–∞:\n"
                    "pip install PyQt5[all]"
                )
                return

            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–Ω—Ç–µ—Ä
            printer = QPrinter(QPrinter.HighResolution)
            printer.setOutputFormat(QPrinter.PdfFormat)
            printer.setOutputFileName(file_path)
            printer.setPageSize(QPrinter.A4)  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É QPrinter.A4
            printer.setPageMargins(15, 15, 15, 15, QPrinter.Millimeter)

            # –°–æ–∑–¥–∞–µ–º HTML –¥–æ–∫—É–º–µ–Ω—Ç —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Å—Ç–∏–ª–µ–º
            html_content = f"""
            <!DOCTYPE html>
            <html>
            <head>
                <meta charset="utf-8">
                <style>
                    body {{
                        font-family: 'Times New Roman', serif;
                        font-size: 11pt;
                        line-height: 1.4;
                        margin: 0;
                        padding: 20px;
                        color: #333;
                    }}
                    h1, h2, h3 {{
                        color: #5E3023;
                        margin-top: 20px;
                        margin-bottom: 10px;
                    }}
                    h1 {{ font-size: 18pt; border-bottom: 2px solid #895737; padding-bottom: 5px; }}
                    h2 {{ font-size: 14pt; }}
                    h3 {{ font-size: 12pt; }}
                    table {{
                        border-collapse: collapse;
                        width: 100%;
                        margin: 10px 0;
                        font-size: 10pt;
                    }}
                    th, td {{
                        border: 1px solid #C08552;
                        padding: 6px;
                        text-align: left;
                    }}
                    th {{
                        background-color: #895737;
                        color: white;
                        font-weight: bold;
                    }}
                    tr:nth-child(even) {{
                        background-color: #F9F9F9;
                    }}
                    .highlight {{
                        background-color: #E8D5C4;
                        padding: 10px;
                        border-radius: 5px;
                        margin: 10px 0;
                    }}
                    p {{
                        margin: 8px 0;
                    }}
                    .footer {{
                        margin-top: 30px;
                        font-size: 9pt;
                        color: #666;
                        text-align: center;
                        border-top: 1px solid #CCC;
                        padding-top: 10px;
                    }}
                </style>
            </head>
            <body>
                {report_text}
                <div class="footer">
                    –î–æ–∫—É–º–µ–Ω—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏—Å—Ç–µ–º–æ–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∫–æ–ª–æ–π
                </div>
            </body>
            </html>
            """

            # –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            doc = QTextDocument()
            doc.setHtml(html_content)

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            page_size = printer.pageRect(QPrinter.Point).size()  # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –≤ –ø–æ–π–Ω—Ç–∞—Ö
            doc.setPageSize(QSizeF(page_size))  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ QSizeF

            # –ü–µ—á–∞—Ç–∞–µ–º –≤ PDF
            doc.print_(printer)

            QMessageBox.information(
                self,
                "–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω",
                f"–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ PDF:\n{file_path}"
            )

        except Exception as e:
            QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ PDF",
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –æ—Ç—á–µ—Ç–∞ –≤ PDF:\n{str(e)}"
            )
            import traceback
            print("–ü–æ–¥—Ä–æ–±–Ω–∞—è –æ—à–∏–±–∫–∞:", traceback.format_exc())

    def logout(self):
        reply = QMessageBox.question(self, "–í—ã—Ö–æ–¥",
                                    "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã?",
                                    QMessageBox.Yes | QMessageBox.No)
        if reply == QMessageBox.Yes:
            self.hide()
            self.login_window = LoginWindow()
            self.login_window.show()


# –î–∏–∞–ª–æ–≥–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π

class StudentDialog(QDialog):
    def __init__(self, db, student_id=None):
        super().__init__()
        self.db = db
        self.student_id = student_id
        self.setWindowTitle("–î–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞" if not student_id else "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—á–µ–Ω–∏–∫–∞")
        self.setFixedSize(550, 450)
        self.setStyleSheet(APP_STYLE)

        layout = QVBoxLayout()

        # –ü–æ–ª—è –≤–≤–æ–¥–∞
        self.last_name_edit = QLineEdit()
        self.first_name_edit = QLineEdit()
        self.middle_name_edit = QLineEdit()

        self.birth_date_edit = QDateEdit()
        self.birth_date_edit.setCalendarPopup(True)
        self.birth_date_edit.setDate(QDate.currentDate())

        self.gender_combo = QComboBox()
        self.gender_combo.addItems(["–ú", "–ñ"])

        self.class_combo = QComboBox()
        self.load_classes()

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –≤ —Ñ–æ—Ä–º—É
        layout.addWidget(QLabel("–§–∞–º–∏–ª–∏—è:"))
        layout.addWidget(self.last_name_edit)
        layout.addWidget(QLabel("–ò–º—è:"))
        layout.addWidget(self.first_name_edit)
        layout.addWidget(QLabel("–û—Ç—á–µ—Å—Ç–≤–æ:"))
        layout.addWidget(self.middle_name_edit)
        layout.addWidget(QLabel("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:"))
        layout.addWidget(self.birth_date_edit)
        layout.addWidget(QLabel("–ü–æ–ª:"))
        layout.addWidget(self.gender_combo)
        layout.addWidget(QLabel("–ö–ª–∞—Å—Å:"))
        layout.addWidget(self.class_combo)

        # –ö–Ω–æ–ø–∫–∏
        btn_layout = QHBoxLayout()
        self.save_btn = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        self.cancel_btn = QPushButton("–û—Ç–º–µ–Ω–∞")

        btn_layout.addWidget(self.save_btn)
        btn_layout.addWidget(self.cancel_btn)
        layout.addLayout(btn_layout)

        self.setLayout(layout)

        # –°–æ–±—ã—Ç–∏—è
        self.save_btn.clicked.connect(self.save)
        self.cancel_btn.clicked.connect(self.reject)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if self.student_id:
            self.load_student_data()

    def load_classes(self):
        self.class_combo.addItem("–ë–µ–∑ –∫–ª–∞—Å—Å–∞", None)
        classes = self.db.execute("SELECT class_id, class_number FROM classes ORDER BY class_number")
        for class_id, class_number in classes:
            self.class_combo.addItem(class_number, class_id)

    def load_student_data(self):
        data = self.db.execute(
            "SELECT last_name, first_name, middle_name, birth_date, gender, class_id FROM students WHERE student_id = %s",
            (self.student_id,)
        )[0]

        self.last_name_edit.setText(data[0] or "")
        self.first_name_edit.setText(data[1] or "")
        self.middle_name_edit.setText(data[2] or "")

        if data[3]:
            self.birth_date_edit.setDate(QDate.fromString(data[3].strftime("%Y-%m-%d"), "yyyy-MM-dd"))

        self.gender_combo.setCurrentText(data[4] or "–ú")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∞—Å—Å
        for i in range(self.class_combo.count()):
            if self.class_combo.itemData(i) == data[5]:
                self.class_combo.setCurrentIndex(i)
                break

    def save(self):
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if not self.last_name_edit.text().strip():
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é")
            return
        if not self.first_name_edit.text().strip():
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∏–º—è")
            return

        try:
            if self.student_id:
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                self.db.execute("""
                                UPDATE students
                                SET last_name=%s,
                                    first_name=%s,
                                    middle_name=%s,
                                    birth_date=%s,
                                    gender=%s,
                                    class_id=%s
                                WHERE student_id = %s
                                """, (
                                    self.last_name_edit.text().strip(),
                                    self.first_name_edit.text().strip(),
                                    self.middle_name_edit.text().strip() or None,
                                    self.birth_date_edit.date().toPyDate(),
                                    self.gender_combo.currentText(),
                                    self.class_combo.currentData(),
                                    self.student_id
                                ), fetch=False)
            else:
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ
                self.db.execute("""
                                INSERT INTO students (last_name, first_name, middle_name, birth_date, gender, class_id)
                                VALUES (%s, %s, %s, %s, %s, %s)
                                """, (
                                    self.last_name_edit.text().strip(),
                                    self.first_name_edit.text().strip(),
                                    self.middle_name_edit.text().strip() or None,
                                    self.birth_date_edit.date().toPyDate(),
                                    self.gender_combo.currentText(),
                                    self.class_combo.currentData()
                                ), fetch=False)

            self.accept()

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —É—á–µ–Ω–∏–∫–∞:\n{str(e)}")


class TeacherDialog(QDialog):
    def __init__(self, db, teacher_id=None):
        super().__init__()
        self.db = db
        self.teacher_id = teacher_id
        self.setWindowTitle("–î–æ–±–∞–≤–∏—Ç—å —É—á–∏—Ç–µ–ª—è" if not teacher_id else "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—á–∏—Ç–µ–ª—è")
        self.setFixedSize(500, 400)
        self.setStyleSheet(APP_STYLE)

        layout = QVBoxLayout()

        # –ü–æ–ª—è –≤–≤–æ–¥–∞
        self.last_name_edit = QLineEdit()
        self.first_name_edit = QLineEdit()
        self.middle_name_edit = QLineEdit()
        self.salary_edit = QLineEdit()
        self.weekly_hours_edit = QLineEdit()

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –≤ —Ñ–æ—Ä–º—É
        layout.addWidget(QLabel("–§–∞–º–∏–ª–∏—è:"))
        layout.addWidget(self.last_name_edit)
        layout.addWidget(QLabel("–ò–º—è:"))
        layout.addWidget(self.first_name_edit)
        layout.addWidget(QLabel("–û—Ç—á–µ—Å—Ç–≤–æ:"))
        layout.addWidget(self.middle_name_edit)
        layout.addWidget(QLabel("–ó–∞—Ä–ø–ª–∞—Ç–∞:"))
        layout.addWidget(self.salary_edit)
        layout.addWidget(QLabel("–ù–µ–¥–µ–ª—å–Ω—ã–µ —á–∞—Å—ã:"))
        layout.addWidget(self.weekly_hours_edit)

        # –ö–Ω–æ–ø–∫–∏
        btn_layout = QHBoxLayout()
        self.save_btn = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        self.cancel_btn = QPushButton("–û—Ç–º–µ–Ω–∞")

        btn_layout.addWidget(self.save_btn)
        btn_layout.addWidget(self.cancel_btn)
        layout.addLayout(btn_layout)

        self.setLayout(layout)

        # –°–æ–±—ã—Ç–∏—è
        self.save_btn.clicked.connect(self.save)
        self.cancel_btn.clicked.connect(self.reject)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if self.teacher_id:
            self.load_teacher_data()

    def load_teacher_data(self):
        data = self.db.execute(
            "SELECT last_name, first_name, middle_name, salary, weekly_hours FROM teachers WHERE teacher_id = %s",
            (self.teacher_id,)
        )[0]

        self.last_name_edit.setText(data[0] or "")
        self.first_name_edit.setText(data[1] or "")
        self.middle_name_edit.setText(data[2] or "")
        self.salary_edit.setText(str(data[3]) if data[3] else "")
        self.weekly_hours_edit.setText(str(data[4]) if data[4] else "")

    def save(self):
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if not self.last_name_edit.text().strip():
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é")
            return
        if not self.first_name_edit.text().strip():
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∏–º—è")
            return

        try:
            salary = int(self.salary_edit.text()) if self.salary_edit.text().strip() else None
            weekly_hours = int(self.weekly_hours_edit.text()) if self.weekly_hours_edit.text().strip() else None
        except ValueError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ó–∞—Ä–ø–ª–∞—Ç–∞ –∏ —á–∞—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏")
            return

        try:
            if self.teacher_id:
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                self.db.execute("""
                                UPDATE teachers
                                SET last_name=%s,
                                    first_name=%s,
                                    middle_name=%s,
                                    salary=%s,
                                    weekly_hours=%s
                                WHERE teacher_id = %s
                                """, (
                                    self.last_name_edit.text().strip(),
                                    self.first_name_edit.text().strip(),
                                    self.middle_name_edit.text().strip() or None,
                                    salary,
                                    weekly_hours,
                                    self.teacher_id
                                ), fetch=False)
            else:
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ
                self.db.execute("""
                                INSERT INTO teachers (last_name, first_name, middle_name, salary, weekly_hours)
                                VALUES (%s, %s, %s, %s, %s)
                                """, (
                                    self.last_name_edit.text().strip(),
                                    self.first_name_edit.text().strip(),
                                    self.middle_name_edit.text().strip() or None,
                                    salary,
                                    weekly_hours
                                ), fetch=False)

            self.accept()

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —É—á–∏—Ç–µ–ª—è:\n{str(e)}")


class ClassDialog(QDialog):
    def __init__(self, db, class_id=None):
        super().__init__()
        self.db = db
        self.class_id = class_id
        self.setWindowTitle("–î–æ–±–∞–≤–∏—Ç—å –∫–ª–∞—Å—Å" if not class_id else "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∞—Å—Å")
        self.setFixedSize(400, 250)
        self.setStyleSheet(APP_STYLE)

        layout = QVBoxLayout()

        # –ü–æ–ª—è –≤–≤–æ–¥–∞
        self.class_number_edit = QLineEdit()
        self.classroom_edit = QLineEdit()

        self.teacher_combo = QComboBox()
        self.load_teachers()

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –≤ —Ñ–æ—Ä–º—É
        layout.addWidget(QLabel("–ù–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞:"))
        layout.addWidget(self.class_number_edit)
        layout.addWidget(QLabel("–ö–∞–±–∏–Ω–µ—Ç:"))
        layout.addWidget(self.classroom_edit)
        layout.addWidget(QLabel("–ö–ª–∞—Å—Å–Ω—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å:"))
        layout.addWidget(self.teacher_combo)

        # –ö–Ω–æ–ø–∫–∏
        btn_layout = QHBoxLayout()
        self.save_btn = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        self.cancel_btn = QPushButton("–û—Ç–º–µ–Ω–∞")

        btn_layout.addWidget(self.save_btn)
        btn_layout.addWidget(self.cancel_btn)
        layout.addLayout(btn_layout)

        self.setLayout(layout)

        # –°–æ–±—ã—Ç–∏—è
        self.save_btn.clicked.connect(self.save)
        self.cancel_btn.clicked.connect(self.reject)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if self.class_id:
            self.load_class_data()

    def load_teachers(self):
        self.teacher_combo.addItem("–ë–µ–∑ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è", None)
        teachers = self.db.execute("""
                                   SELECT teacher_id,
                                          CONCAT(last_name, ' ', first_name, ' ', COALESCE(middle_name, '')) as full_name
                                   FROM teachers
                                   ORDER BY last_name, first_name
                                   """)
        for teacher_id, full_name in teachers:
            self.teacher_combo.addItem(full_name, teacher_id)

    def load_class_data(self):
        data = self.db.execute(
            "SELECT class_number, classroom, homeroom_teacher_id FROM classes WHERE class_id = %s",
            (self.class_id,)
        )[0]

        self.class_number_edit.setText(data[0] or "")
        self.classroom_edit.setText(str(data[1]) if data[1] else "")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—á–∏—Ç–µ–ª—è
        for i in range(self.teacher_combo.count()):
            if self.teacher_combo.itemData(i) == data[2]:
                self.teacher_combo.setCurrentIndex(i)
                break

    def save(self):
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if not self.class_number_edit.text().strip():
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞")
            return

        try:
            classroom = int(self.classroom_edit.text()) if self.classroom_edit.text().strip() else None
        except ValueError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–æ–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return

        try:
            if self.class_id:
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                self.db.execute("""
                                UPDATE classes
                                SET class_number=%s,
                                    classroom=%s,
                                    homeroom_teacher_id=%s
                                WHERE class_id = %s
                                """, (
                                    self.class_number_edit.text().strip(),
                                    classroom,
                                    self.teacher_combo.currentData(),
                                    self.class_id
                                ), fetch=False)
            else:
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ
                self.db.execute("""
                                INSERT INTO classes (class_number, classroom, homeroom_teacher_id, student_count)
                                VALUES (%s, %s, %s, 0)
                                """, (
                                    self.class_number_edit.text().strip(),
                                    classroom,
                                    self.teacher_combo.currentData()
                                ), fetch=False)

            self.accept()

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–ª–∞—Å—Å:\n{str(e)}")


class SubjectDialog(QDialog):
    def __init__(self, db, subject_id=None):
        super().__init__()
        self.db = db
        self.subject_id = subject_id
        self.setWindowTitle("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç" if not subject_id else "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç")
        self.setFixedSize(400, 250)
        self.setStyleSheet(APP_STYLE)

        layout = QVBoxLayout()

        # –ü–æ–ª—è –≤–≤–æ–¥–∞
        self.subject_name_edit = QLineEdit()
        self.weekly_hours_edit = QLineEdit()

        self.teacher_combo = QComboBox()
        self.load_teachers()

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –≤ —Ñ–æ—Ä–º—É
        layout.addWidget(QLabel("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:"))
        layout.addWidget(self.subject_name_edit)
        layout.addWidget(QLabel("–ù–µ–¥–µ–ª—å–Ω—ã–µ —á–∞—Å—ã:"))
        layout.addWidget(self.weekly_hours_edit)
        layout.addWidget(QLabel("–£—á–∏—Ç–µ–ª—å:"))
        layout.addWidget(self.teacher_combo)

        # –ö–Ω–æ–ø–∫–∏
        btn_layout = QHBoxLayout()
        self.save_btn = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        self.cancel_btn = QPushButton("–û—Ç–º–µ–Ω–∞")

        btn_layout.addWidget(self.save_btn)
        btn_layout.addWidget(self.cancel_btn)
        layout.addLayout(btn_layout)

        self.setLayout(layout)

        # –°–æ–±—ã—Ç–∏—è
        self.save_btn.clicked.connect(self.save)
        self.cancel_btn.clicked.connect(self.reject)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if self.subject_id:
            self.load_subject_data()

    def load_teachers(self):
        self.teacher_combo.addItem("–ë–µ–∑ —É—á–∏—Ç–µ–ª—è", None)
        teachers = self.db.execute("""
                                   SELECT teacher_id,
                                          CONCAT(last_name, ' ', first_name, ' ', COALESCE(middle_name, '')) as full_name
                                   FROM teachers
                                   ORDER BY last_name, first_name
                                   """)
        for teacher_id, full_name in teachers:
            self.teacher_combo.addItem(full_name, teacher_id)

    def load_subject_data(self):
        data = self.db.execute(
            "SELECT subject_name, weekly_hours, teacher_id FROM subjects WHERE subject_id = %s",
            (self.subject_id,)
        )[0]

        self.subject_name_edit.setText(data[0] or "")
        self.weekly_hours_edit.setText(str(data[1]) if data[1] else "")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—á–∏—Ç–µ–ª—è
        for i in range(self.teacher_combo.count()):
            if self.teacher_combo.itemData(i) == data[2]:
                self.teacher_combo.setCurrentIndex(i)
                break

    def save(self):
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if not self.subject_name_edit.text().strip():
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞")
            return

        try:
            weekly_hours = int(self.weekly_hours_edit.text()) if self.weekly_hours_edit.text().strip() else None
        except ValueError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ–¥–µ–ª—å–Ω—ã–µ —á–∞—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return

        try:
            if self.subject_id:
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                self.db.execute("""
                                UPDATE subjects
                                SET subject_name=%s,
                                    weekly_hours=%s,
                                    teacher_id=%s
                                WHERE subject_id = %s
                                """, (
                                    self.subject_name_edit.text().strip(),
                                    weekly_hours,
                                    self.teacher_combo.currentData(),
                                    self.subject_id
                                ), fetch=False)
            else:
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ
                self.db.execute("""
                                INSERT INTO subjects (subject_name, weekly_hours, teacher_id)
                                VALUES (%s, %s, %s)
                                """, (
                                    self.subject_name_edit.text().strip(),
                                    weekly_hours,
                                    self.teacher_combo.currentData()
                                ), fetch=False)

            self.accept()

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç:\n{str(e)}")


class LessonDialog(QDialog):
    def __init__(self, db, lesson_id=None):
        super().__init__()
        self.db = db
        self.lesson_id = lesson_id
        self.setWindowTitle("–î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫" if not lesson_id else "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Ä–æ–∫")
        self.setFixedSize(450, 550)
        self.setStyleSheet(APP_STYLE)

        layout = QVBoxLayout()

        # –ü–æ–ª—è –≤–≤–æ–¥–∞
        self.class_combo = QComboBox()
        self.load_classes()

        self.subject_combo = QComboBox()
        self.load_subjects()

        self.teacher_combo = QComboBox()
        self.load_teachers()

        self.day_combo = QComboBox()
        self.day_combo.addItems([
            "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞"
        ])

        from PyQt5.QtWidgets import QTimeEdit
        from PyQt5.QtCore import QTime

        self.time_edit = QTimeEdit()
        self.time_edit.setTime(QTime(8, 30))  # –í—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.time_edit.setDisplayFormat("HH:mm")

        self.classroom_edit = QLineEdit()

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –≤ —Ñ–æ—Ä–º—É
        layout.addWidget(QLabel("–ö–ª–∞—Å—Å:"))
        layout.addWidget(self.class_combo)
        layout.addWidget(QLabel("–ü—Ä–µ–¥–º–µ—Ç:"))
        layout.addWidget(self.subject_combo)
        layout.addWidget(QLabel("–£—á–∏—Ç–µ–ª—å:"))
        layout.addWidget(self.teacher_combo)
        layout.addWidget(QLabel("–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏:"))
        layout.addWidget(self.day_combo)
        layout.addWidget(QLabel("–í—Ä–µ–º—è —É—Ä–æ–∫–∞:"))
        layout.addWidget(self.time_edit)
        layout.addWidget(QLabel("–ö–∞–±–∏–Ω–µ—Ç:"))
        layout.addWidget(self.classroom_edit)

        # –ö–Ω–æ–ø–∫–∏
        btn_layout = QHBoxLayout()
        self.save_btn = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        self.cancel_btn = QPushButton("–û—Ç–º–µ–Ω–∞")

        btn_layout.addWidget(self.save_btn)
        btn_layout.addWidget(self.cancel_btn)
        layout.addLayout(btn_layout)

        self.setLayout(layout)

        # –°–æ–±—ã—Ç–∏—è
        self.save_btn.clicked.connect(self.save)
        self.cancel_btn.clicked.connect(self.reject)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if self.lesson_id:
            self.load_lesson_data()

    def load_classes(self):
        classes = self.db.execute("""
                                  SELECT class_id, class_number
                                  FROM classes
                                  ORDER BY class_number
                                  """)
        for class_id, class_number in classes:
            self.class_combo.addItem(class_number, class_id)

    def load_subjects(self):
        subjects = self.db.execute("""
                                   SELECT subject_id, subject_name
                                   FROM subjects
                                   ORDER BY subject_name
                                   """)
        for subject_id, subject_name in subjects:
            self.subject_combo.addItem(subject_name, subject_id)

    def load_teachers(self):
        teachers = self.db.execute("""
                                   SELECT teacher_id,
                                          CONCAT(last_name, ' ', first_name, ' ', COALESCE(middle_name, '')) as full_name
                                   FROM teachers
                                   ORDER BY last_name, first_name
                                   """)
        for teacher_id, full_name in teachers:
            self.teacher_combo.addItem(full_name, teacher_id)

    def load_lesson_data(self):
        data = self.db.execute("""
                               SELECT class_id, subject_id, teacher_id, day_of_week, lesson_time, classroom
                               FROM lessons
                               WHERE lesson_id = %s
                               """, (self.lesson_id,))[0]

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∞—Å—Å
        for i in range(self.class_combo.count()):
            if self.class_combo.itemData(i) == data[0]:
                self.class_combo.setCurrentIndex(i)
                break

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç
        for i in range(self.subject_combo.count()):
            if self.subject_combo.itemData(i) == data[1]:
                self.subject_combo.setCurrentIndex(i)
                break

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—á–∏—Ç–µ–ª—è
        for i in range(self.teacher_combo.count()):
            if self.teacher_combo.itemData(i) == data[2]:
                self.teacher_combo.setCurrentIndex(i)
                break

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        if data[3]:
            index = self.day_combo.findText(data[3])
            if index >= 0:
                self.day_combo.setCurrentIndex(index)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è
        if data[4]:
            if hasattr(data[4], 'hour'):  # timedelta object
                hours = data[4].hour
                minutes = data[4].minute
                self.time_edit.setTime(QTime(hours, minutes))
            else:  # string
                time_str = str(data[4])
                if ':' in time_str:
                    hours, minutes = map(int, time_str.split(':')[:2])
                    self.time_edit.setTime(QTime(hours, minutes))

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–±–∏–Ω–µ—Ç
        self.classroom_edit.setText(str(data[5]) if data[5] else "")

    def save(self):
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if self.class_combo.currentData() is None:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å")
            return
        if self.subject_combo.currentData() is None:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç")
            return
        if self.teacher_combo.currentData() is None:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∏—Ç–µ–ª—è")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
        time_str = self.time_edit.time().toString("HH:mm:ss")

        conflict_query = """
                         SELECT 1 \
                         FROM lessons
                         WHERE class_id = %s
                           AND day_of_week = %s
                           AND lesson_time = %s \
                         """
        conflict_params = [
            self.class_combo.currentData(),
            self.day_combo.currentText(),
            time_str
        ]

        if self.lesson_id:
            conflict_query += " AND lesson_id != %s"
            conflict_params.append(self.lesson_id)

        conflict = self.db.execute(conflict_query, conflict_params)

        if conflict:
            QMessageBox.warning(
                self,
                "–ö–æ–Ω—Ñ–ª–∏–∫—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è",
                f"–£ –∫–ª–∞—Å—Å–∞ {self.class_combo.currentText()} —É–∂–µ –µ—Å—Ç—å —É—Ä–æ–∫ "
                f"–≤ {self.day_combo.currentText()} –≤ {self.time_edit.time().toString('HH:mm')}"
            )
            return

        try:
            classroom = int(self.classroom_edit.text()) if self.classroom_edit.text().strip() else None
        except ValueError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–æ–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return

        try:
            if self.lesson_id:
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                self.db.execute("""
                                UPDATE lessons
                                SET class_id=%s,
                                    subject_id=%s,
                                    teacher_id=%s,
                                    day_of_week=%s,
                                    lesson_time=%s,
                                    classroom=%s
                                WHERE lesson_id = %s
                                """, (
                                    self.class_combo.currentData(),
                                    self.subject_combo.currentData(),
                                    self.teacher_combo.currentData(),
                                    self.day_combo.currentText(),
                                    time_str,
                                    classroom,
                                    self.lesson_id
                                ), fetch=False)
            else:
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ
                self.db.execute("""
                                INSERT INTO lessons (class_id, subject_id, teacher_id, day_of_week, lesson_time, classroom)
                                VALUES (%s, %s, %s, %s, %s, %s)
                                """, (
                                    self.class_combo.currentData(),
                                    self.subject_combo.currentData(),
                                    self.teacher_combo.currentData(),
                                    self.day_combo.currentText(),
                                    time_str,
                                    classroom
                                ), fetch=False)

            self.accept()

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —É—Ä–æ–∫:\n{str(e)}")


class GradeDialog(QDialog):
    def __init__(self, db, grade_id=None):
        super().__init__()
        self.db = db
        self.grade_id = grade_id
        self.setWindowTitle("–î–æ–±–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É" if not grade_id else "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ü–µ–Ω–∫—É")
        self.setFixedSize(400, 650)
        self.setStyleSheet(APP_STYLE)

        layout = QVBoxLayout()

        # –ü–æ–ª—è –≤–≤–æ–¥–∞
        self.student_combo = QComboBox()
        self.load_students()

        self.subject_combo = QComboBox()
        self.load_subjects()

        self.grade_combo = QComboBox()
        self.grade_combo.addItems(["5", "4", "3", "2"])

        self.date_edit = QDateEdit()
        self.date_edit.setCalendarPopup(True)
        self.date_edit.setDate(QDate.currentDate())

        self.grade_type_combo = QComboBox()
        self.grade_type_combo.addItems([
            "–∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è", "—Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–∞—è", "—É—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç", "–¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ", "—Ç–µ—Å—Ç"
        ])

        self.teacher_combo = QComboBox()
        self.load_teachers()

        self.comment_edit = QLineEdit()

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –≤ —Ñ–æ—Ä–º—É
        layout.addWidget(QLabel("–£—á–µ–Ω–∏–∫:"))
        layout.addWidget(self.student_combo)
        layout.addWidget(QLabel("–ü—Ä–µ–¥–º–µ—Ç:"))
        layout.addWidget(self.subject_combo)
        layout.addWidget(QLabel("–û—Ü–µ–Ω–∫–∞:"))
        layout.addWidget(self.grade_combo)
        layout.addWidget(QLabel("–î–∞—Ç–∞:"))
        layout.addWidget(self.date_edit)
        layout.addWidget(QLabel("–¢–∏–ø –æ—Ü–µ–Ω–∫–∏:"))
        layout.addWidget(self.grade_type_combo)
        layout.addWidget(QLabel("–£—á–∏—Ç–µ–ª—å:"))
        layout.addWidget(self.teacher_combo)
        layout.addWidget(QLabel("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:"))
        layout.addWidget(self.comment_edit)

        # –ö–Ω–æ–ø–∫–∏
        btn_layout = QHBoxLayout()
        self.save_btn = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        self.cancel_btn = QPushButton("–û—Ç–º–µ–Ω–∞")

        btn_layout.addWidget(self.save_btn)
        btn_layout.addWidget(self.cancel_btn)
        layout.addLayout(btn_layout)

        self.setLayout(layout)

        # –°–æ–±—ã—Ç–∏—è
        self.save_btn.clicked.connect(self.save)
        self.cancel_btn.clicked.connect(self.reject)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if self.grade_id:
            self.load_grade_data()

    def load_students(self):
        students = self.db.execute("""
                                   SELECT student_id,
                                          CONCAT(last_name, ' ', first_name, ' ', COALESCE(middle_name, '')) as full_name
                                   FROM students
                                   ORDER BY last_name, first_name
                                   """)
        for student_id, full_name in students:
            self.student_combo.addItem(full_name, student_id)

    def load_subjects(self):
        subjects = self.db.execute("SELECT subject_id, subject_name FROM subjects ORDER BY subject_name")
        for subject_id, subject_name in subjects:
            self.subject_combo.addItem(subject_name, subject_id)

    def load_teachers(self):
        teachers = self.db.execute("""
                                   SELECT teacher_id,
                                          CONCAT(last_name, ' ', first_name, ' ', COALESCE(middle_name, '')) as full_name
                                   FROM teachers
                                   ORDER BY last_name, first_name
                                   """)
        for teacher_id, full_name in teachers:
            self.teacher_combo.addItem(full_name, teacher_id)

    def load_grade_data(self):
        data = self.db.execute("""
                               SELECT student_id, subject_id, grade, grade_date, grade_type, teacher_id, comment
                               FROM grades
                               WHERE grade_id = %s
                               """, (self.grade_id,))[0]

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –£—á–µ–Ω–∏–∫–∞
        for i in range(self.student_combo.count()):
            if self.student_combo.itemData(i) == data[0]:
                self.student_combo.setCurrentIndex(i)
                break

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç
        for i in range(self.subject_combo.count()):
            if self.subject_combo.itemData(i) == data[1]:
                self.subject_combo.setCurrentIndex(i)
                break

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ü–µ–Ω–∫—É
        self.grade_combo.setCurrentText(str(data[2]))

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É
        if data[3]:
            self.date_edit.setDate(QDate.fromString(data[3].strftime("%Y-%m-%d"), "yyyy-MM-dd"))

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø
        if data[4]:
            self.grade_type_combo.setCurrentText(data[4])

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—á–∏—Ç–µ–ª—è
        for i in range(self.teacher_combo.count()):
            if self.teacher_combo.itemData(i) == data[5]:
                self.teacher_combo.setCurrentIndex(i)
                break

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        self.comment_edit.setText(data[6] or "")

    def save(self):
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if self.student_combo.currentData() is None:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞")
            return
        if self.subject_combo.currentData() is None:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç")
            return
        if self.teacher_combo.currentData() is None:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∏—Ç–µ–ª—è")
            return

        try:
            if self.grade_id:
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                self.db.execute("""
                                UPDATE grades
                                SET student_id=%s,
                                    subject_id=%s,
                                    grade=%s,
                                    grade_date=%s,
                                    grade_type=%s,
                                    teacher_id=%s,
                                    comment=%s
                                WHERE grade_id = %s
                                """, (
                                    self.student_combo.currentData(),
                                    self.subject_combo.currentData(),
                                    int(self.grade_combo.currentText()),
                                    self.date_edit.date().toPyDate(),
                                    self.grade_type_combo.currentText(),
                                    self.teacher_combo.currentData(),
                                    self.comment_edit.text().strip() or None,
                                    self.grade_id
                                ), fetch=False)
            else:
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ
                self.db.execute("""
                                INSERT INTO grades (student_id, subject_id, grade, grade_date, grade_type, teacher_id,
                                                    comment)
                                VALUES (%s, %s, %s, %s, %s, %s, %s)
                                """, (
                                    self.student_combo.currentData(),
                                    self.subject_combo.currentData(),
                                    int(self.grade_combo.currentText()),
                                    self.date_edit.date().toPyDate(),
                                    self.grade_type_combo.currentText(),
                                    self.teacher_combo.currentData(),
                                    self.comment_edit.text().strip() or None
                                ), fetch=False)

            self.accept()

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É:\n{str(e)}")


if __name__ == "__main__":
    app = QApplication(sys.argv)
    app.setStyleSheet(APP_STYLE)

    palette = QPalette()
    palette.setColor(QPalette.Window, QColor("#F3E9DC"))
    app.setPalette(palette)

    window = LoginWindow()
    window.show()

    sys.exit(app.exec_())